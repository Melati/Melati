// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.doc.example;

import org.melati.poem.*;

public class OrderTableBase extends Table {

  private Column col_id = null;
  private Column col_buyer = null;
  private Column col_product = null;
  private Column col_urgent = null;

  public OrderTableBase(Database database, String name) throws PoemException {
    super(database, name, DefinitionSource.dsd);
  }

  protected void init() throws PoemException {
    defineColumn(col_id =
        new Column(this, "id", TroidPoemType.it, DefinitionSource.dsd) { 
          public Object getIdent(Data data) {
            return (Integer)((OrderData)data).id;
          }

          public void setIdent(Data data, Object ident) {
            ((OrderData)data).id = (Integer)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Order)g).getId();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((Order)g).setId((Integer)value);
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected int defaultDisplayOrder() {
            return 0;
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((Order)g).getId();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((Order)g).setId((Integer)ident);
          }
        });

    defineColumn(col_buyer =
        new Column(this, "buyer", new ReferencePoemType(((ExampleDatabase)getDatabase()).getBuyerTable(), false), DefinitionSource.dsd) { 
          public Object getIdent(Data data) {
            return (Integer)((OrderData)data).buyer;
          }

          public void setIdent(Data data, Object ident) {
            ((OrderData)data).buyer = (Integer)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Order)g).getBuyer();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((Order)g).setBuyer((Buyer)value);
          }

          protected int defaultDisplayOrder() {
            return 1;
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((Order)g).getBuyerTroid();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((Order)g).setBuyerTroid((Integer)ident);
          }
        });

    defineColumn(col_product =
        new Column(this, "product", new ReferencePoemType(((ExampleDatabase)getDatabase()).getProductTable(), false), DefinitionSource.dsd) { 
          public Object getIdent(Data data) {
            return (Integer)((OrderData)data).product;
          }

          public void setIdent(Data data, Object ident) {
            ((OrderData)data).product = (Integer)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Order)g).getProduct();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((Order)g).setProduct((Product)value);
          }

          protected int defaultDisplayOrder() {
            return 2;
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((Order)g).getProductTroid();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((Order)g).setProductTroid((Integer)ident);
          }
        });

    defineColumn(col_urgent =
        new Column(this, "urgent", new BooleanPoemType(false), DefinitionSource.dsd) { 
          public Object getIdent(Data data) {
            return (Boolean)((OrderData)data).urgent;
          }

          public void setIdent(Data data, Object ident) {
            ((OrderData)data).urgent = (Boolean)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Order)g).getUrgent();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((Order)g).setUrgent((Boolean)value);
          }

          protected int defaultDisplayOrder() {
            return 3;
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((Order)g).getUrgent();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((Order)g).setUrgent((Boolean)ident);
          }
        });
  }

  public final Column getIdColumn() {
    return col_id;
  }

  public final Column getBuyerColumn() {
    return col_buyer;
  }

  public final Column getProductColumn() {
    return col_product;
  }

  public final Column getUrgentColumn() {
    return col_urgent;
  }

  public Order getOrderObject(Integer troid) {
    return (Order)getObject(troid);
  }

  public Order getOrderObject(int troid) {
    return (Order)getObject(troid);
  }

  protected Persistent newPersistent() {
    return new Order();
  }

  protected Data _newData() {
    return new OrderData();
  }
  protected String defaultDescription() {
    return "An order";
  }

  protected int defaultDisplayOrder() {
    return 3;
  }
}
