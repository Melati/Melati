// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.poem.generated;

import org.melati.poem.*;
import java.util.*;
import java.sql.Date;
import java.sql.Timestamp;

public class TableInfoTableBase extends Table {

  private Column col_id = null;
  private Column col_name = null;
  private Column col_displayname = null;
  private Column col_description = null;
  private Column col_displayorder = null;
  private Column col_defaultcanread = null;
  private Column col_defaultcanwrite = null;
  private Column col_defaultcandelete = null;
  private Column col_cancreate = null;
  private Column col_cachelimit = null;
  private Column col_seqcached = null;
  private Column col_category = null;

  public TableInfoTableBase(
      Database database, String name,
      DefinitionSource definitionSource) throws PoemException {
    super(database, name, definitionSource);
  }

  public TableInfoTableBase(
      Database database, String name) throws PoemException {
    this(database, name, DefinitionSource.dsd);
  }

  public PoemDatabaseTables getPoemDatabaseTables() {
    return (PoemDatabaseTables)getDatabase();
  }

  protected void init() throws PoemException {
    super.init();
    defineColumn(col_id =
        new Column(this, "id", new TroidPoemType(), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getId();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setId((Integer)cooked);
          }

          public Field asField(Persistent g) {
            return ((TableInfo)g).getIdField();
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.detail;
          }

          protected int defaultDisplayOrder() {
            return 0;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getId_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setId_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getId();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setId((Integer)raw);
          }
        });

    defineColumn(col_name =
        new Column(this, "name", new StringPoemType(false, 50), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getName();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setName((String)cooked);
          }

          public Field asField(Persistent g) {
            return ((TableInfo)g).getNameField();
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected int defaultDisplayOrder() {
            return 1;
          }

          protected String defaultDescription() {
            return "A code-name for the table";
          }

          protected boolean defaultUnique() {
            return true;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getName_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setName_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getName();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setName((String)raw);
          }
        });

    defineColumn(col_displayname =
        new Column(this, "displayname", new StringPoemType(false, 60), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getDisplayname();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setDisplayname((String)cooked);
          }

          public Field asField(Persistent g) {
            return ((TableInfo)g).getDisplaynameField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.primary;
          }

          protected Integer defaultDisplayOrderPriority() {
            return new Integer(1);
          }

          protected String defaultDisplayName() {
            return "Display name";
          }

          protected int defaultDisplayOrder() {
            return 2;
          }

          protected String defaultDescription() {
            return "A user-friendly name for the table";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getDisplayname_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setDisplayname_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getDisplayname();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setDisplayname((String)raw);
          }
        });

    defineColumn(col_description =
        new Column(this, "description", new StringPoemType(true, -1), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getDescription();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setDescription((String)cooked);
          }

          public Field asField(Persistent g) {
            return ((TableInfo)g).getDescriptionField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected int defaultDisplayOrder() {
            return 3;
          }

          protected String defaultDescription() {
            return "A brief description of the table's function";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getDescription_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setDescription_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getDescription();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setDescription((String)raw);
          }
        });

    defineColumn(col_displayorder =
        new Column(this, "displayorder", new IntegerPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getDisplayorder();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setDisplayorder((Integer)cooked);
          }

          public Field asField(Persistent g) {
            return ((TableInfo)g).getDisplayorderField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.summary;
          }

          protected Integer defaultDisplayOrderPriority() {
            return new Integer(0);
          }

          protected String defaultDisplayName() {
            return "Display order";
          }

          protected int defaultDisplayOrder() {
            return 4;
          }

          protected String defaultDescription() {
            return "A rank determining where the table appears in the list of all tables";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getDisplayorder_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setDisplayorder_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getDisplayorder();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setDisplayorder((Integer)raw);
          }
        });

    defineColumn(col_defaultcanread =
        new Column(this, "defaultcanread", new ReferencePoemType(getPoemDatabaseTables().getCapabilityTable(), true), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getDefaultcanread();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setDefaultcanread((Capability)cooked);
          }

          public Field asField(Persistent g) {
            return ((TableInfo)g).getDefaultcanreadField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected String defaultDisplayName() {
            return "Default `read' capability";
          }

          protected int defaultDisplayOrder() {
            return 5;
          }

          protected String defaultDescription() {
            return "The capability required, by default, for reading the table's records";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getDefaultcanread_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setDefaultcanread_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getDefaultcanreadTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setDefaultcanreadTroid((Integer)raw);
          }
        });

    defineColumn(col_defaultcanwrite =
        new Column(this, "defaultcanwrite", new ReferencePoemType(getPoemDatabaseTables().getCapabilityTable(), true), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getDefaultcanwrite();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setDefaultcanwrite((Capability)cooked);
          }

          public Field asField(Persistent g) {
            return ((TableInfo)g).getDefaultcanwriteField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected String defaultDisplayName() {
            return "Default `write' capability";
          }

          protected int defaultDisplayOrder() {
            return 6;
          }

          protected String defaultDescription() {
            return "The capability required, by default, for updating the table's records";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getDefaultcanwrite_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setDefaultcanwrite_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getDefaultcanwriteTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setDefaultcanwriteTroid((Integer)raw);
          }
        });

    defineColumn(col_defaultcandelete =
        new Column(this, "defaultcandelete", new ReferencePoemType(getPoemDatabaseTables().getCapabilityTable(), true), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getDefaultcandelete();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setDefaultcandelete((Capability)cooked);
          }

          public Field asField(Persistent g) {
            return ((TableInfo)g).getDefaultcandeleteField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected String defaultDisplayName() {
            return "Default `delete' capability";
          }

          protected int defaultDisplayOrder() {
            return 7;
          }

          protected String defaultDescription() {
            return "The capability required, by default, for deleting the table's records";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getDefaultcandelete_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setDefaultcandelete_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getDefaultcandeleteTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setDefaultcandeleteTroid((Integer)raw);
          }
        });

    defineColumn(col_cancreate =
        new Column(this, "cancreate", new ReferencePoemType(getPoemDatabaseTables().getCapabilityTable(), true), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getCancreate();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setCancreate((Capability)cooked);
          }

          public Field asField(Persistent g) {
            return ((TableInfo)g).getCancreateField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected String defaultDisplayName() {
            return "Default `create' capability";
          }

          protected int defaultDisplayOrder() {
            return 8;
          }

          protected String defaultDescription() {
            return "The capability required, by default, for creating records in the table";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getCancreate_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setCancreate_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getCancreateTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setCancreateTroid((Integer)raw);
          }
        });

    defineColumn(col_cachelimit =
        new Column(this, "cachelimit", new IntegerPoemType(true), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getCachelimit();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setCachelimit((Integer)cooked);
          }

          public Field asField(Persistent g) {
            return ((TableInfo)g).getCachelimitField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected String defaultDisplayName() {
            return "Cache size limit";
          }

          protected int defaultDisplayOrder() {
            return 9;
          }

          protected String defaultDescription() {
            return "The maximum number of records from the table to keep in the cache";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getCachelimit_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setCachelimit_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getCachelimit();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setCachelimit((Integer)raw);
          }
        });

    defineColumn(col_seqcached =
        new Column(this, "seqcached", new BooleanPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getSeqcached();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setSeqcached((Boolean)cooked);
          }

          public Field asField(Persistent g) {
            return ((TableInfo)g).getSeqcachedField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected String defaultDisplayName() {
            return "Record sequence cached";
          }

          protected int defaultDisplayOrder() {
            return 10;
          }

          protected String defaultDescription() {
            return "Whether the display sequence for the table's records is cached";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getSeqcached_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setSeqcached_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getSeqcached();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setSeqcached((Boolean)raw);
          }
        });

    defineColumn(col_category =
        new Column(this, "category", new ReferencePoemType(getPoemDatabaseTables().getTableCategoryTable(), false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getCategory();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setCategory((TableCategory)cooked);
          }

          public Field asField(Persistent g) {
            return ((TableInfo)g).getCategoryField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.primary;
          }

          protected int defaultDisplayOrder() {
            return 11;
          }

          protected String defaultDescription() {
            return "Which category the table falls into";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getCategory_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setCategory_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getCategoryTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((TableInfo)g).setCategoryTroid((Integer)raw);
          }
        });
  }

  public final Column getIdColumn() {
    return col_id;
  }

  public final Column getNameColumn() {
    return col_name;
  }

  public final Column getDisplaynameColumn() {
    return col_displayname;
  }

  public final Column getDescriptionColumn() {
    return col_description;
  }

  public final Column getDisplayorderColumn() {
    return col_displayorder;
  }

  public final Column getDefaultcanreadColumn() {
    return col_defaultcanread;
  }

  public final Column getDefaultcanwriteColumn() {
    return col_defaultcanwrite;
  }

  public final Column getDefaultcandeleteColumn() {
    return col_defaultcandelete;
  }

  public final Column getCancreateColumn() {
    return col_cancreate;
  }

  public final Column getCachelimitColumn() {
    return col_cachelimit;
  }

  public final Column getSeqcachedColumn() {
    return col_seqcached;
  }

  public final Column getCategoryColumn() {
    return col_category;
  }

  public TableInfo getTableInfoObject(Integer troid) {
    return (TableInfo)getObject(troid);
  }

  public TableInfo getTableInfoObject(int troid) {
    return (TableInfo)getObject(troid);
  }

  protected Persistent _newPersistent() {
    return new TableInfo();
  }
  protected String defaultDisplayName() {
    return "Table";
  }

  protected String defaultDescription() {
    return "Configuration information about a table in the database";
  }

  protected boolean defaultRememberAllTroids() {
    return true;
  }

  protected Integer defaultCacheLimit() {
    return new Integer(999999999);
  }

  protected String defaultCategory() {
    return "System";
  }

  protected int defaultDisplayOrder() {
    return 3010;
  }
}
