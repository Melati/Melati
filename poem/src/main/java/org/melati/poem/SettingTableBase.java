// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.poem;

import java.util.*;
import java.sql.Date;
import java.sql.Timestamp;
import org.melati.util.*;

public class SettingTableBase extends Table {

  private Column col_id = null;
  private Column col_typefactory = null;
  private Column col_name = null;
  private Column col_rawstring = null;
  private Column col_displayname = null;
  private Column col_description = null;

  public SettingTableBase(
      Database database, String name,
      DefinitionSource definitionSource) throws PoemException {
    super(database, name, definitionSource);
  }

  public SettingTableBase(
      Database database, String name) throws PoemException {
    this(database, name, DefinitionSource.dsd);
  }

  public PoemDatabase getPoemDatabase() {
    return (PoemDatabase)getDatabase();  }

  protected void init() throws PoemException {
    super.init();
    defineColumn(col_id =
        new Column(this, "id", TroidPoemType.it, DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Setting)g).getId();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Setting)g).setId((Integer)cooked);
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected int defaultDisplayOrder() {
            return 0;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Setting)g).getId_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Setting)g).setId_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Setting)g).getId();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Setting)g).setId((Integer)raw);
          }
        });

    defineColumn(col_typefactory =
        new Column(this, "typefactory", new ColumnTypePoemType(getDatabase()), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Setting)g).getTypefactory();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Setting)g).setTypefactory((PoemTypeFactory)cooked);
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected String defaultDisplayName() {
            return "Type";
          }

          protected int defaultDisplayOrder() {
            return 1;
          }

          protected String defaultDescription() {
            return "The setting's Melati type";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Setting)g).getTypefactory_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Setting)g).setTypefactory_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Setting)g).getTypefactoryCode();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Setting)g).setTypefactoryCode((Integer)raw);
          }
        });

    defineColumn(col_name =
        new Column(this, "name", new StringPoemType(false, -1), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Setting)g).getName();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Setting)g).setName((String)cooked);
          }

          protected int defaultDisplayOrder() {
            return 2;
          }

          protected String defaultDescription() {
            return "A code name for this setting";
          }

          protected boolean defaultUnique() {
            return true;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Setting)g).getName_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Setting)g).setName_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Setting)g).getName();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Setting)g).setName((String)raw);
          }
        });

    defineColumn(col_rawstring =
        new Column(this, "rawstring", new StringPoemType(false, -1), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Setting)g).getRawstring();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Setting)g).setRawstring((String)cooked);
          }

          protected String defaultDisplayName() {
            return "Value";
          }

          protected int defaultDisplayOrder() {
            return 3;
          }

          protected String defaultDescription() {
            return "The value of this setting";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Setting)g).getRawstring_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Setting)g).setRawstring_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Setting)g).getRawstring();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Setting)g).setRawstring((String)raw);
          }
        });

    defineColumn(col_displayname =
        new Column(this, "displayname", new StringPoemType(false, -1), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Setting)g).getDisplayname();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Setting)g).setDisplayname((String)cooked);
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultPrimaryDisplay() {
            return true;
          }

          protected Integer defaultDisplayOrderPriority() {
            return new Integer(0);
          }

          protected int defaultDisplayOrder() {
            return 4;
          }

          protected String defaultDescription() {
            return "A human-readable name for this setting";
          }

          protected boolean defaultUnique() {
            return true;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Setting)g).getDisplayname_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Setting)g).setDisplayname_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Setting)g).getDisplayname();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Setting)g).setDisplayname((String)raw);
          }
        });

    defineColumn(col_description =
        new Column(this, "description", new StringPoemType(false, -1), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Setting)g).getDescription();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Setting)g).setDescription((String)cooked);
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected int defaultDisplayOrder() {
            return 5;
          }

          protected String defaultDescription() {
            return "A description for this setting";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Setting)g).getDescription_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Setting)g).setDescription_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Setting)g).getDescription();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Setting)g).setDescription((String)raw);
          }
        });
  }

  public final Column getIdColumn() {
    return col_id;
  }

  public final Column getTypefactoryColumn() {
    return col_typefactory;
  }

  public final Column getNameColumn() {
    return col_name;
  }

  public final Column getRawstringColumn() {
    return col_rawstring;
  }

  public final Column getDisplaynameColumn() {
    return col_displayname;
  }

  public final Column getDescriptionColumn() {
    return col_description;
  }

  public Setting getSettingObject(Integer troid) {
    return (Setting)getObject(troid);
  }

  public Setting getSettingObject(int troid) {
    return (Setting)getObject(troid);
  }

  protected Persistent _newPersistent() {
    return new Setting();
  }
  protected String defaultDescription() {
    return "A configurable setting for the application";
  }

  protected boolean defaultRememberAllTroids() {
    return true;
  }

  protected Integer defaultCacheLimit() {
    return null;
  }

  protected String defaultCategory() {
    return "System";
  }

  protected int defaultDisplayOrder() {
    return 3040;
  }
}
