// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.poem;

import java.util.*;
import java.sql.Date;
import java.sql.Timestamp;
import org.melati.util.*;

public class ColumnInfoTableBase extends Table {

  private Column col_id = null;
  private Column col_tableinfo = null;
  private Column col_name = null;
  private Column col_displayname = null;
  private Column col_description = null;
  private Column col_displayorder = null;
  private Column col_usereditable = null;
  private Column col_usercreateable = null;
  private Column col_recorddisplay = null;
  private Column col_summarydisplay = null;
  private Column col_primarydisplay = null;
  private Column col_searchcriterion = null;
  private Column col_primarycriterion = null;
  private Column col_displayorderpriority = null;
  private Column col_type = null;
  private Column col_nullable = null;
  private Column col_indexed = null;
  private Column col_unique = null;
  private Column col_size = null;
  private Column col_width = null;
  private Column col_height = null;
  private Column col_renderinfo = null;
  private Column col_rangelow_string = null;
  private Column col_rangelimit_string = null;

  public ColumnInfoTableBase(
      Database database, String name,
      DefinitionSource definitionSource) throws PoemException {
    super(database, name, definitionSource);
  }

  public ColumnInfoTableBase(
      Database database, String name) throws PoemException {
    this(database, name, DefinitionSource.dsd);
  }

  public PoemDatabase getPoemDatabase() {
    return (PoemDatabase)getDatabase();  }

  protected void init() throws PoemException {
    super.init();
    defineColumn(col_id =
        new Column(this, "id", TroidPoemType.it, DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getId();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setId((Integer)cooked);
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected int defaultDisplayOrder() {
            return 0;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getId_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setId_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getId();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setId((Integer)raw);
          }
        });

    defineColumn(col_tableinfo =
        new Column(this, "tableinfo", new ReferencePoemType(((PoemDatabase)getDatabase()).getTableInfoTable(), false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getTableinfo();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setTableinfo((TableInfo)cooked);
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected Integer defaultDisplayOrderPriority() {
            return new Integer(0);
          }

          protected String defaultDisplayName() {
            return "Owning table";
          }

          protected int defaultDisplayOrder() {
            return 1;
          }

          protected String defaultDescription() {
            return "The table to which the field belongs";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getTableinfo_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setTableinfo_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getTableinfoTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setTableinfoTroid((Integer)raw);
          }
        });

    defineColumn(col_name =
        new Column(this, "name", new StringPoemType(false, 50), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getName();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setName((String)cooked);
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected int defaultDisplayOrder() {
            return 2;
          }

          protected String defaultDescription() {
            return "A code-name for the field";
          }

          protected boolean defaultIndexed() {
            return true;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getName_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setName_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getName();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setName((String)raw);
          }
        });

    defineColumn(col_displayname =
        new Column(this, "displayname", new StringPoemType(false, 60), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getDisplayname();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setDisplayname((String)cooked);
          }

          protected boolean defaultPrimaryDisplay() {
            return true;
          }

          protected Integer defaultDisplayOrderPriority() {
            return new Integer(2);
          }

          protected String defaultDisplayName() {
            return "Display name";
          }

          protected int defaultDisplayOrder() {
            return 3;
          }

          protected String defaultDescription() {
            return "A user-friendly name for the field";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getDisplayname_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setDisplayname_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getDisplayname();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setDisplayname((String)raw);
          }
        });

    defineColumn(col_description =
        new Column(this, "description", new StringPoemType(true, -1), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getDescription();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setDescription((String)cooked);
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected int defaultDisplayOrder() {
            return 4;
          }

          protected String defaultDescription() {
            return "A brief description of the field's function";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getDescription_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setDescription_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getDescription();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setDescription((String)raw);
          }
        });

    defineColumn(col_displayorder =
        new Column(this, "displayorder", new IntegerPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getDisplayorder();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setDisplayorder((Integer)cooked);
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected Integer defaultDisplayOrderPriority() {
            return new Integer(1);
          }

          protected String defaultDisplayName() {
            return "Display order";
          }

          protected int defaultDisplayOrder() {
            return 5;
          }

          protected String defaultDescription() {
            return "A rank determining where the field appears in lists";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getDisplayorder_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setDisplayorder_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getDisplayorder();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setDisplayorder((Integer)raw);
          }
        });

    defineColumn(col_usereditable =
        new Column(this, "usereditable", new BooleanPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getUsereditable();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setUsereditable((Boolean)cooked);
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected String defaultDisplayName() {
            return "User-editable";
          }

          protected int defaultDisplayOrder() {
            return 6;
          }

          protected String defaultDescription() {
            return "Whether it makes sense for the user to update the field's value";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getUsereditable_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setUsereditable_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getUsereditable();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setUsereditable((Boolean)raw);
          }
        });

    defineColumn(col_usercreateable =
        new Column(this, "usercreateable", new BooleanPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getUsercreateable();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setUsercreateable((Boolean)cooked);
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected String defaultDisplayName() {
            return "User-createable";
          }

          protected int defaultDisplayOrder() {
            return 7;
          }

          protected String defaultDescription() {
            return "Whether it makes sense for the user to initialise the field's value";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getUsercreateable_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setUsercreateable_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getUsercreateable();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setUsercreateable((Boolean)raw);
          }
        });

    defineColumn(col_recorddisplay =
        new Column(this, "recorddisplay", new BooleanPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getRecorddisplay();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setRecorddisplay((Boolean)cooked);
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected String defaultDisplayName() {
            return "Record display";
          }

          protected int defaultDisplayOrder() {
            return 8;
          }

          protected String defaultDescription() {
            return "Whether to show the field in full displays of a record";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getRecorddisplay_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setRecorddisplay_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getRecorddisplay();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setRecorddisplay((Boolean)raw);
          }
        });

    defineColumn(col_summarydisplay =
        new Column(this, "summarydisplay", new BooleanPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getSummarydisplay();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setSummarydisplay((Boolean)cooked);
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected String defaultDisplayName() {
            return "Summary display";
          }

          protected int defaultDisplayOrder() {
            return 9;
          }

          protected String defaultDescription() {
            return "Whether to show the field in summary displays";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getSummarydisplay_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setSummarydisplay_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getSummarydisplay();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setSummarydisplay((Boolean)raw);
          }
        });

    defineColumn(col_primarydisplay =
        new Column(this, "primarydisplay", new BooleanPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getPrimarydisplay();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setPrimarydisplay((Boolean)cooked);
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected String defaultDisplayName() {
            return "Primary display";
          }

          protected int defaultDisplayOrder() {
            return 10;
          }

          protected String defaultDescription() {
            return "Whether the field is used as a short representation of the whole record";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getPrimarydisplay_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setPrimarydisplay_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getPrimarydisplay();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setPrimarydisplay((Boolean)raw);
          }
        });

    defineColumn(col_searchcriterion =
        new Column(this, "searchcriterion", new BooleanPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getSearchcriterion();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setSearchcriterion((Boolean)cooked);
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected String defaultDisplayName() {
            return "Search criterion";
          }

          protected int defaultDisplayOrder() {
            return 11;
          }

          protected String defaultDescription() {
            return "Whether to offer the field as a criterion in searches";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getSearchcriterion_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setSearchcriterion_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getSearchcriterion();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setSearchcriterion((Boolean)raw);
          }
        });

    defineColumn(col_primarycriterion =
        new Column(this, "primarycriterion", new BooleanPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getPrimarycriterion();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setPrimarycriterion((Boolean)cooked);
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected String defaultDisplayName() {
            return "Primary search criterion";
          }

          protected int defaultDisplayOrder() {
            return 12;
          }

          protected String defaultDescription() {
            return "Whether the field is used as the main criterion in searches";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getPrimarycriterion_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setPrimarycriterion_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getPrimarycriterion();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setPrimarycriterion((Boolean)raw);
          }
        });

    defineColumn(col_displayorderpriority =
        new Column(this, "displayorderpriority", new IntegerPoemType(true), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getDisplayorderpriority();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setDisplayorderpriority((Integer)cooked);
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected String defaultDisplayName() {
            return "Display order priority";
          }

          protected int defaultDisplayOrder() {
            return 13;
          }

          protected String defaultDescription() {
            return "If present, the level at which lists of records are sorted by the field";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getDisplayorderpriority_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setDisplayorderpriority_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getDisplayorderpriority();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setDisplayorderpriority((Integer)raw);
          }
        });

    defineColumn(col_type =
        new Column(this, "type", new ColumnTypePoemType(getDatabase()), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getType();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setType((PoemTypeFactory)cooked);
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected int defaultDisplayOrder() {
            return 14;
          }

          protected String defaultDescription() {
            return "The field's Melati type";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getType_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setType_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getTypeCode();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setTypeCode((Integer)raw);
          }
        });

    defineColumn(col_nullable =
        new Column(this, "nullable", new BooleanPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getNullable();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setNullable((Boolean)cooked);
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected int defaultDisplayOrder() {
            return 15;
          }

          protected String defaultDescription() {
            return "Whether the field can be empty";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getNullable_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setNullable_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getNullable();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setNullable((Boolean)raw);
          }
        });

    defineColumn(col_indexed =
        new Column(this, "indexed", new BooleanPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getIndexed();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setIndexed((Boolean)cooked);
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected int defaultDisplayOrder() {
            return 16;
          }

          protected String defaultDescription() {
            return "Whether the field is indexed (ignored if the field is marked `unique')";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getIndexed_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setIndexed_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getIndexed();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setIndexed((Boolean)raw);
          }
        });

    defineColumn(col_unique =
        new Column(this, "unique", new BooleanPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getUnique();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setUnique((Boolean)cooked);
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected int defaultDisplayOrder() {
            return 17;
          }

          protected String defaultDescription() {
            return "Whether the field is unique (implies that it's `indexed')";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getUnique_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setUnique_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getUnique();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setUnique((Boolean)raw);
          }
        });

    defineColumn(col_size =
        new Column(this, "size", new IntegerPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getSize();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setSize((Integer)cooked);
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected int defaultDisplayOrder() {
            return 18;
          }

          protected String defaultDescription() {
            return "For character fields, the maximum number of characters that can be stored";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getSize_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setSize_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getSize();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setSize((Integer)raw);
          }
        });

    defineColumn(col_width =
        new Column(this, "width", new IntegerPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getWidth();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setWidth((Integer)cooked);
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected String defaultDisplayName() {
            return "Input-box width";
          }

          protected int defaultDisplayOrder() {
            return 19;
          }

          protected String defaultDescription() {
            return "A sensible width for text boxes used for entering the field, where appropriate";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getWidth_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setWidth_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getWidth();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setWidth((Integer)raw);
          }
        });

    defineColumn(col_height =
        new Column(this, "height", new IntegerPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getHeight();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setHeight((Integer)cooked);
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected String defaultDisplayName() {
            return "Input-box height";
          }

          protected int defaultDisplayOrder() {
            return 20;
          }

          protected String defaultDescription() {
            return "A sensible height for text boxes used for entering the field, where appropriate";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getHeight_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setHeight_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getHeight();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setHeight((Integer)raw);
          }
        });

    defineColumn(col_renderinfo =
        new Column(this, "renderinfo", new StringPoemType(true, -1), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getRenderinfo();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setRenderinfo((String)cooked);
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected String defaultDisplayName() {
            return "Rendering information";
          }

          protected int defaultDisplayOrder() {
            return 21;
          }

          protected String defaultDescription() {
            return "The name of the Melati templet (if not the default) to use for input controls for the field";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getRenderinfo_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setRenderinfo_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getRenderinfo();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setRenderinfo((String)raw);
          }
        });

    defineColumn(col_rangelow_string =
        new Column(this, "rangelow_string", new StringPoemType(true, -1), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getRangelow_string();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setRangelow_string((String)cooked);
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected String defaultDisplayName() {
            return "Range: low";
          }

          protected int defaultDisplayOrder() {
            return 22;
          }

          protected String defaultDescription() {
            return "The low end of the range of permissible values for the field";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getRangelow_string_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setRangelow_string_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getRangelow_string();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setRangelow_string((String)raw);
          }
        });

    defineColumn(col_rangelimit_string =
        new Column(this, "rangelimit_string", new StringPoemType(true, -1), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getRangelimit_string();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setRangelimit_string((String)cooked);
          }

          protected boolean defaultSummaryDisplay() {
            return false;
          }

          protected boolean defaultSearchCriterion() {
            return false;
          }

          protected String defaultDisplayName() {
            return "Range: limit";
          }

          protected int defaultDisplayOrder() {
            return 23;
          }

          protected String defaultDescription() {
            return "The (exclusive) limit of the range of permissible values for the field";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getRangelimit_string_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setRangelimit_string_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getRangelimit_string();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setRangelimit_string((String)raw);
          }
        });
  }

  public final Column getIdColumn() {
    return col_id;
  }

  public final Column getTableinfoColumn() {
    return col_tableinfo;
  }

  public final Column getNameColumn() {
    return col_name;
  }

  public final Column getDisplaynameColumn() {
    return col_displayname;
  }

  public final Column getDescriptionColumn() {
    return col_description;
  }

  public final Column getDisplayorderColumn() {
    return col_displayorder;
  }

  public final Column getUsereditableColumn() {
    return col_usereditable;
  }

  public final Column getUsercreateableColumn() {
    return col_usercreateable;
  }

  public final Column getRecorddisplayColumn() {
    return col_recorddisplay;
  }

  public final Column getSummarydisplayColumn() {
    return col_summarydisplay;
  }

  public final Column getPrimarydisplayColumn() {
    return col_primarydisplay;
  }

  public final Column getSearchcriterionColumn() {
    return col_searchcriterion;
  }

  public final Column getPrimarycriterionColumn() {
    return col_primarycriterion;
  }

  public final Column getDisplayorderpriorityColumn() {
    return col_displayorderpriority;
  }

  public final Column getTypeColumn() {
    return col_type;
  }

  public final Column getNullableColumn() {
    return col_nullable;
  }

  public final Column getIndexedColumn() {
    return col_indexed;
  }

  public final Column getUniqueColumn() {
    return col_unique;
  }

  public final Column getSizeColumn() {
    return col_size;
  }

  public final Column getWidthColumn() {
    return col_width;
  }

  public final Column getHeightColumn() {
    return col_height;
  }

  public final Column getRenderinfoColumn() {
    return col_renderinfo;
  }

  public final Column getRangelow_stringColumn() {
    return col_rangelow_string;
  }

  public final Column getRangelimit_stringColumn() {
    return col_rangelimit_string;
  }

  public ColumnInfo getColumnInfoObject(Integer troid) {
    return (ColumnInfo)getObject(troid);
  }

  public ColumnInfo getColumnInfoObject(int troid) {
    return (ColumnInfo)getObject(troid);
  }

  protected Persistent _newPersistent() {
    return new ColumnInfo();
  }
  protected String defaultDisplayName() {
    return "Column";
  }

  protected String defaultDescription() {
    return "Configuration information about a column in the database";
  }

  protected boolean defaultRememberAllTroids() {
    return true;
  }

  protected Integer defaultCacheLimit() {
    return null;
  }

  protected String defaultCategory() {
    return "System";
  }

  protected int defaultDisplayOrder() {
    return 3020;
  }
}
