// Do not edit this file!  It was generated by Melati Poem's DSD preprocessor.

package org.melati.poem;

public class UserTableBase extends Table {

  private Column col_id = null;
  private Column col_name = null;

  public UserTableBase(Database database, String name) throws PoemException {
    super(database, name, DefinitionSource.dsd);
  }

  protected void init() throws PoemException {
    defineColumn(col_id =
        new Column(this, "id", TroidPoemType.it, DefinitionSource.dsd) { 
          public Object getIdent(Data data) {
            return (Integer)((UserData)data).id;
          }

          public void setIdent(Data data, Object ident) {
            ((UserData)data).id = (Integer)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((User)g).getId();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((User)g).setId((Integer)value);
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((User)g).getId();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((User)g).setId((Integer)ident);
          }
        });

    defineColumn(col_name =
        new Column(this, "name", new StringPoemType(false, 60), DefinitionSource.dsd) { 
          public Object getIdent(Data data) {
            return (String)((UserData)data).name;
          }

          public void setIdent(Data data, Object ident) {
            ((UserData)data).name = (String)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((User)g).getName();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((User)g).setName((String)value);
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((User)g).getName();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((User)g).setName((String)ident);
          }
        });
  }

  public final Column getIdColumn() {
    return col_id;
  }

  public final Column getNameColumn() {
    return col_name;
  }

  public User getUserObject(Integer troid) {
    return (User)getObject(troid);
  }

  protected Persistent newPersistent() {
    return new User();
  }

  protected Data _newData() {
    return new UserData();
  }
}
