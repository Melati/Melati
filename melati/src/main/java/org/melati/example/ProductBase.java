// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.doc.example;

import org.melati.poem.*;

public class ProductBase extends Persistent {

  public final ProductData dataSnapshot()
      throws AccessPoemException {
    return (ProductData)_dataSnapshot();
  }

  protected final ProductData dataForReading()
      throws AccessPoemException {
    return (ProductData)_dataForReading();
  }

  protected final ProductData dataForWriting()
      throws AccessPoemException {
    return (ProductData)_dataForWriting();
  }

  public ProductTable getProductTable() {
    return (ProductTable)getTable();
  }

  public Integer getId()
      throws AccessPoemException {
    return dataForReading().id;
  }

  public void setId(Integer value)
      throws AccessPoemException, ValidationPoemException {
    getProductTable().getIdColumn().getType().assertValidValue(value);
    dataForWriting().id = value;
  }

  public final void setId(int value)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(value));
  }

  public final Field getIdField() throws AccessPoemException {
    return getProductTable().getIdColumn().asField(this);
  }

  public String getName()
      throws AccessPoemException {
    return dataForReading().name;
  }

  public void setName(String value)
      throws AccessPoemException, ValidationPoemException {
    getProductTable().getNameColumn().getType().assertValidValue(value);
    dataForWriting().name = value;
  }

  public final Field getNameField() throws AccessPoemException {
    return getProductTable().getNameColumn().asField(this);
  }

  public Double getPrice()
      throws AccessPoemException {
    return dataForReading().price;
  }

  public void setPrice(Double value)
      throws AccessPoemException, ValidationPoemException {
    getProductTable().getPriceColumn().getType().assertValidValue(value);
    dataForWriting().price = value;
  }

  public final void setPrice(double value)
      throws AccessPoemException, ValidationPoemException {
    setPrice(new Double(value));
  }

  public final Field getPriceField() throws AccessPoemException {
    return getProductTable().getPriceColumn().asField(this);
  }
}
