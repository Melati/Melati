// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.poem.generated;

import org.melati.poem.*;
import java.util.*;
import java.sql.Date;
import java.sql.Timestamp;

public abstract class GroupMembershipBase extends Persistent {

  public PoemDatabase getPoemDatabase() {
    return (PoemDatabase)getDatabase();
  }

  public GroupMembershipTable getGroupMembershipTable() {
    return (GroupMembershipTable)getTable();
  }

  private GroupMembershipTable _getGroupMembershipTable() {
    return (GroupMembershipTable)getTable();
  }

  protected Integer id;
  protected Integer user;
  protected Integer group;

  public Integer getId_unsafe() {
    return id;
  }

  public void setId_unsafe(Integer cooked) {
    id = cooked;
  }

  public Integer getId()
      throws AccessPoemException {
    readLock();
    return getId_unsafe();
  }

  public void setId(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getGroupMembershipTable().getIdColumn().getType().assertValidCooked(cooked);
    writeLock();
    setId_unsafe(cooked);
  }

  public final void setId(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(cooked));
  }

  public Field getIdField() throws AccessPoemException {
    Column c = _getGroupMembershipTable().getIdColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getUser_unsafe() {
    return user;
  }

  public void setUser_unsafe(Integer cooked) {
    user = cooked;
  }

  public Integer getUserTroid()
      throws AccessPoemException {
    readLock();
    return getUser_unsafe();
  }

  public void setUserTroid(Integer raw)
      throws AccessPoemException {
    _getGroupMembershipTable().getUserColumn().getType().assertValidRaw(raw);
    writeLock();
    setUser_unsafe(raw);
  }

  public User getUser()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getUserTroid();
    return troid == null ? null :
        getPoemDatabase().getUserTable().getUserObject(troid);
  }

  public void setUser(User cooked)
      throws AccessPoemException {
    setUserTroid(cooked == null ? null : cooked.troid());
  }

  public Field getUserField() throws AccessPoemException {
    Column c = _getGroupMembershipTable().getUserColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getGroup_unsafe() {
    return group;
  }

  public void setGroup_unsafe(Integer cooked) {
    group = cooked;
  }

  public Integer getGroupTroid()
      throws AccessPoemException {
    readLock();
    return getGroup_unsafe();
  }

  public void setGroupTroid(Integer raw)
      throws AccessPoemException {
    _getGroupMembershipTable().getGroupColumn().getType().assertValidRaw(raw);
    writeLock();
    setGroup_unsafe(raw);
  }

  public Group getGroup()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getGroupTroid();
    return troid == null ? null :
        getPoemDatabase().getGroupTable().getGroupObject(troid);
  }

  public void setGroup(Group cooked)
      throws AccessPoemException {
    setGroupTroid(cooked == null ? null : cooked.troid());
  }

  public Field getGroupField() throws AccessPoemException {
    Column c = _getGroupMembershipTable().getGroupColumn();
    return new Field(c.getRaw(this), c);
  }
}
