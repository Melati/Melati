<?xml version="1.0"?>

<document>

  <properties>
    <title>Melati - Java SQL Website Development Engine</title>
    <author email="timp">Tim Pizey</author>
    <keywords>
      Persistence, Java, SQL, Database, Templates, Object Relational Mapping,
      ORM, Objects, Object Oriented, J2EE replacement
    </keywords>
  </properties>

  <body>


<!--
<p align="center">
 <font size="-1"><i>
This page last updated: $Date$ $Author$
 </i></font>
</p>
-->
  
<!-- menu -->

<section name=" Extending POEM generated classes ">
<p>
POEM generates Table and Persistent classes from a Data Structure Definition (DSD) 
which contains a richer set of attributes than an SQL Data Definition Language (DDL) definition.
</p>
<p>
The inheritance hierarchy is a little convoluted, but it results in the classes which the 
programmer should edit being in a single package, with the main bulk of the generated 
files being created in a sub-directory (<tt>generated</tt>).
</p>
<subsection name=" Extending POEM generated Table classes ">
<p>
The class heirarchy for a standard generated table called <tt>MyTable</tt> in package <tt>org.myorg.myproject</tt> 
would be:
</p>
<table>
<tr>
<td>
<tt>java.lang.Object</tt>
</td>
</tr>
<tr>
<td>
<tt>org.melati.poem.Table</tt>
</td>
</tr>
<tr>
<td>
<tt>org.myorg.myproject.MyprojectTable</tt>
</td>
</tr>
<tr>
<td>
<tt>org.myorg.myproject.generated.MyTableBase</tt>
</td>
</tr>
<tr>
<td>
<tt>org.myorg.myproject.MyTable</tt>
</td>
</tr>
</table>
<p>
This structure enables the programmer to override any method inheritted from 
<tt>org.melati.poem.Table</tt> either on a per table basis or for all tables within the project.
</p>
<p>
It also enables the POEM metadata tables and the project tables to be treated separately. 
For example the project tables could have a different unique key (TROID) allocation 
algorithm from the metadata tables by overriding <tt>troidFor(Persistent persistent)</tt>.
</p>
</subsection>
<subsection name=" Extending POEM generated Persistent classes ">
<p>
The DSD supports the notion of abstract tables and of extension.
An abstract table has its code generated in the same way as a 
concrete table, but it is not represented in the underlying database.
</p>
<p>
If all you have a group of tables all of which have a field of the same type, 
creation timestamp, updating user, parent record for example, then these fields can 
be defined in an abstract table and the target table can extend it. 
The POEM DSD itself uses this technique:
</p>
<pre>
abstract table ValueInfo {
  String displayname
    (size = 60)
    (displayname = "Display name")
    (displayorder = 100)
    (description = "A user-friendly name for the field")
    (displayorderpriority = 2)
    (displaylevel = primary);

....

}
table ColumnInfo extends org.melati.poem.ValueInfo
    (displayorder = 3020)
    (displayname = "Column")
    (description = "Configuration information about a column in the database")
    (category = "System")
    (cachelimit = unlimited)
    (seqcached) {

....
}

table Setting extends org.melati.poem.ValueInfo
  (displayorder = 3040)
  (description = "A configurable Setting for the application, where a Setting can be of any object type")
  (category = "System")
  (cachelimit = unlimited)
  (seqcached) {

....
}
</pre>
<p>
Even if your tables do not share fields of common type you can still use this technique, 
as abstract tables do not have to contain any fields.
</p>
<p>
For example project tables can be made Treeable by creating an abstract table 
to the DSD and extending from it:
</p>
<pre>
package org.myorg.myproject;


abstract table MyProjectTreeable
  (description = "A treeable record")
{}

table MyPersistent extends MyProjectTreeable
{
....
}
</pre>
<p>
The resulting class hierarchy 
</p>
<table>
<tr>
<td>
<tt>java.lang.Object</tt>
</td>
</tr>
<tr>
<td>
<tt>org.melati.poem.Persistent</tt>
</td>
</tr>
<tr>
<td>
<tt>org.myorg.myproject.generated.MyProjectTreeableBase</tt>
</td>
</tr>
<tr>
<td>
<tt>org.myorg.myproject.generated.MyProjectTreeable</tt>
</td>
</tr>
<tr>
<td>
<tt>org.myorg.myproject.generated.MyPersistentBase</tt>
</td>
</tr>
<tr>
<td>
<tt>org.myorg.myproject.MyPersistent</tt>
</td>
</tr>
</table>

<p>
adding the following to <tt>MyprojectTable.java</tt>:
</p>
<pre>
public class MyprojectTreeable extends AdaptTreeableBase implements Treeable {

 /**
  * Constructor 
  * for a <code>Persistent</code> <code>AdaptTreeable</code> object.
  * <p>
  * Description: 
  *   A treeable Adapt record. 
  * </p>
  * 
  * @generator org.melati.poem.prepro.TableDef#generateMainJava 
  */
  public AdaptTreeable() { }

  // programmer's domain-specific code here

  /** 
   * {@inheritDoc}
   * @see org.melati.util.Treeable#getChildren()
   */
  public Treeable[] getChildren() {
    Enumeration kidsEnum = getDatabase().referencesTo(this);
    Vector kidsVector = EnumUtils.vectorOf(kidsEnum);
    Treeable[] kidsArray = new Treeable[kidsVector.size()];
    kidsVector.copyInto(kidsArray);
    return kidsArray;
  }

  /** 
   * {@inheritDoc}
   * @see org.melati.util.Treeable#getName()
   */
  public String getName() {
    return displayString();
  }
  
  

}
</pre>
</subsection>
</section>
</body>
</document>












