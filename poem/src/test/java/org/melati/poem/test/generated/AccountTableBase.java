// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.poem.test.generated;


import org.melati.poem.AccessPoemException;
import org.melati.poem.Column;
import org.melati.poem.Database;
import org.melati.poem.DefinitionSource;
import org.melati.poem.DisplayLevel;
import org.melati.poem.Field;
import org.melati.poem.JdbcPersistent;
import org.melati.poem.Persistent;
import org.melati.poem.PoemException;
import org.melati.poem.ReferencePoemType;
import org.melati.poem.Searchability;
import org.melati.poem.StringKeyReferencePoemType;
import org.melati.poem.StringPoemType;
import org.melati.poem.TroidPoemType;
import org.melati.poem.ValidationPoemException;
import org.melati.poem.test.Account;
import org.melati.poem.test.EverythingDatabaseTables;
import org.melati.poem.test.EverythingTable;
// FIXME extended table 
import org.melati.poem.test.User;


/**
 * Melati POEM generated base class for <code>Table</code> <code>Account</code>.
 *
 * see org.melati.poem.prepro.TableDef#generateTableBaseJava 
 */

public class AccountTableBase<T extends Account> extends EverythingTable<T> {

  private Column<Integer> col_id = null;
  private Column<Integer> col_user = null;
  private Column<String> col_emailAddress = null;
  private Column<String> col_name = null;

 /**
  * Constructor. 
  * 
  * see org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @param database          the POEM database we are using
  * @param name              the name of this <code>Table</code>
  * @param definitionSource  which definition is being used
  * @throws PoemException    if anything goes wrong
  */

  public AccountTableBase(
      Database database, String name,
      DefinitionSource definitionSource) throws PoemException {
    super(database, name, definitionSource);
  }


 /**
  * Get the database tables.
  *
  * see org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @return the database tables
  */
  public EverythingDatabaseTables getEverythingDatabaseTables() {
    return (EverythingDatabaseTables)getDatabase();
  }


 /**
  * Initialise this table by defining its columns.
  *
  * see org.melati.poem.prepro.TableDef#generateTableBaseJava 
  */
  public void init() throws PoemException {
    super.init();
    defineColumn(col_id =
        new Column<Integer>(this, "id",
                   new TroidPoemType(),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Account)g).getId();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Account)g).setId((Integer)cooked);
          }

          public Field<Integer> asField(Persistent g) {
            return ((Account)g).getIdField();
          }

          public boolean defaultUserEditable() {
            return false;
          }

          public boolean defaultUserCreateable() {
            return false;
          }

          public DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          public Searchability defaultSearchability() {
            return Searchability.no;
          }

          public int defaultDisplayOrder() {
            return 0;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Account)g).getId_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Account)g).setId_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Account)g).getId();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Account)g).setId((Integer)raw);
          }
        });

    defineColumn(col_user =
        new Column<Integer>(this, "user",
                   new ReferencePoemType(getEverythingDatabaseTables().
                                             getUserTable(), false),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Account)g).getUser();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Account)g).setUser((User)cooked);
          }

          public Field<Integer> asField(Persistent g) {
            return ((Account)g).getUserField();
          }

          public DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.summary;
          }

          public Searchability defaultSearchability() {
            return Searchability.yes;
          }

          public int defaultDisplayOrder() {
            return 60;
          }

          public String defaultDescription() {
            return "The owner";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Account)g).getUser_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Account)g).setUser_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Account)g).getUserTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Account)g).setUserTroid((Integer)raw);
          }
        });

    defineColumn(col_emailAddress =
        new Column<String>(this, "emailAddress",
                   new StringKeyReferencePoemType(getEverythingDatabaseTables().
                                             getEverythingUserTable(), "email", false, -1),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Account)g).getEmailAddress();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Account)g).setEmailAddress((User)cooked);
          }

          public Field<String> asField(Persistent g) {
            return ((Account)g).getEmailAddressField();
          }

          public DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.summary;
          }

          public Searchability defaultSearchability() {
            return Searchability.yes;
          }

          public int defaultDisplayOrder() {
            return 50;
          }

          public String defaultDescription() {
            return "The owner's email address";
          }

          public int defaultWidth() {
            return 40;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Account)g).getEmailAddress_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Account)g).setEmailAddress_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Account)g).getEmailAddress();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Account)g).setEmailAddress((String)raw);
          }
        });

    defineColumn(col_name =
        new Column<String>(this, "name",
                   new StringPoemType(true, -1),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Account)g).getName();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Account)g).setName((String)cooked);
          }

          public Field<String> asField(Persistent g) {
            return ((Account)g).getNameField();
          }

          public DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.summary;
          }

          public Searchability defaultSearchability() {
            return Searchability.yes;
          }

          public int defaultDisplayOrder() {
            return 150;
          }

          public String defaultDescription() {
            return "The user's name";
          }

          public int defaultWidth() {
            return 40;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Account)g).getName_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Account)g).setName_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Account)g).getName();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Account)g).setName((String)raw);
          }
        });
  }


 /**
  * Retrieves the <code>Id</code> <code>Column</code> for this 
  * <code>Account</code> <code>Table</code>.
  * 
  * see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the id <code>Column</code>
  */
  public final Column<Integer> getIdColumn() {
    return col_id;
  }


 /**
  * Retrieves the <code>User</code> <code>Column</code> for this 
  * <code>Account</code> <code>Table</code>.
  * 
  * see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the user <code>Column</code>
  */
  public final Column<Integer> getUserColumn() {
    return col_user;
  }


 /**
  * Retrieves the <code>EmailAddress</code> <code>Column</code> for this 
  * <code>Account</code> <code>Table</code>.
  * 
  * see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the emailAddress <code>Column</code>
  */
  public final Column<String> getEmailAddressColumn() {
    return col_emailAddress;
  }


 /**
  * Retrieves the <code>Name</code> <code>Column</code> for this 
  * <code>Account</code> <code>Table</code>.
  * 
  * see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the name <code>Column</code>
  */
  public final Column<String> getNameColumn() {
    return col_name;
  }


 /**
  * Retrieve the <code>Account</code> as a <code>Account</code>.
  *
  * see org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @param troid a Table Row Oject ID
  * @return the <code>Persistent</code> identified by the <code>troid</code>
  */
  public Account getAccountObject(Integer troid) {
    return (Account)getObject(troid);
  }


 /**
  * Retrieve the <code>Account</code> 
  * as a <code>Account</code>.
  *
  * see org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @param troid a Table Row Object ID
  * @return the <code>Persistent</code> identified   */
  public Account getAccountObject(int troid) {
    return (Account)getObject(troid);
  }

  protected JdbcPersistent _newPersistent() {
    return new Account();
  }
  public String defaultDescription() {
    return "An account owned by a User";
  }

  public String defaultCategory() {
    return "User";
  }

  public int defaultDisplayOrder() {
    return 2020;
  }
}

