// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.poem.generated;

import org.melati.poem.*;
import java.util.*;
import java.sql.Date;
import java.sql.Timestamp;

public class ColumnInfoTableBase extends ValueInfoTable {

  private Column col_id = null;
  private Column col_tableinfo = null;
  private Column col_name = null;
  private Column col_displayorder = null;
  private Column col_usercreateable = null;
  private Column col_displaylevel = null;
  private Column col_searchability = null;
  private Column col_displayorderpriority = null;
  private Column col_indexed = null;
  private Column col_unique = null;

  public ColumnInfoTableBase(
      Database database, String name,
      DefinitionSource definitionSource) throws PoemException {
    super(database, name, definitionSource);
  }

  public ColumnInfoTableBase(
      Database database, String name) throws PoemException {
    this(database, name, DefinitionSource.dsd);
  }

  public PoemDatabase getPoemDatabase() {
    return (PoemDatabase)getDatabase();  }

  protected void init() throws PoemException {
    super.init();
    defineColumn(col_id =
        new Column(this, "id", new TroidPoemType(), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getId();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setId((Integer)cooked);
          }

          public Field asField(Persistent g) {
            return ((ColumnInfo)g).getIdField();
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected int defaultDisplayOrder() {
            return 0;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getId_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setId_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getId();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setId((Integer)raw);
          }
        });

    defineColumn(col_tableinfo =
        new Column(this, "tableinfo", new ReferencePoemType(((PoemDatabase)getDatabase()).getTableInfoTable(), false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getTableinfo();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setTableinfo((TableInfo)cooked);
          }

          public Field asField(Persistent g) {
            return ((ColumnInfo)g).getTableinfoField();
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected Searchability defaultSearchability() {
            return Searchability.primary;
          }

          protected Integer defaultDisplayOrderPriority() {
            return new Integer(0);
          }

          protected String defaultDisplayName() {
            return "Owning table";
          }

          protected int defaultDisplayOrder() {
            return 1;
          }

          protected String defaultDescription() {
            return "The table to which the field belongs";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getTableinfo_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setTableinfo_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getTableinfoTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setTableinfoTroid((Integer)raw);
          }
        });

    defineColumn(col_name =
        new Column(this, "name", new StringPoemType(false, 50), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getName();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setName((String)cooked);
          }

          public Field asField(Persistent g) {
            return ((ColumnInfo)g).getNameField();
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected int defaultDisplayOrder() {
            return 300;
          }

          protected String defaultDescription() {
            return "A code-name for the field";
          }

          protected boolean defaultIndexed() {
            return true;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getName_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setName_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getName();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setName((String)raw);
          }
        });

    defineColumn(col_displayorder =
        new Column(this, "displayorder", new IntegerPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getDisplayorder();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setDisplayorder((Integer)cooked);
          }

          public Field asField(Persistent g) {
            return ((ColumnInfo)g).getDisplayorderField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected Integer defaultDisplayOrderPriority() {
            return new Integer(1);
          }

          protected String defaultDisplayName() {
            return "Display order";
          }

          protected int defaultDisplayOrder() {
            return 301;
          }

          protected String defaultDescription() {
            return "A rank determining where the field appears in lists";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getDisplayorder_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setDisplayorder_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getDisplayorder();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setDisplayorder((Integer)raw);
          }
        });

    defineColumn(col_usercreateable =
        new Column(this, "usercreateable", new BooleanPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getUsercreateable();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setUsercreateable((Boolean)cooked);
          }

          public Field asField(Persistent g) {
            return ((ColumnInfo)g).getUsercreateableField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.detail;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected String defaultDisplayName() {
            return "User-createable";
          }

          protected int defaultDisplayOrder() {
            return 302;
          }

          protected String defaultDescription() {
            return "Whether it makes sense for the user to initialise the field's value";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getUsercreateable_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setUsercreateable_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getUsercreateable();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setUsercreateable((Boolean)raw);
          }
        });

    defineColumn(col_displaylevel =
        new Column(this, "displaylevel", new DisplayLevelPoemType(), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getDisplaylevel();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setDisplaylevel((DisplayLevel)cooked);
          }

          public Field asField(Persistent g) {
            return ((ColumnInfo)g).getDisplaylevelField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.detail;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected int defaultDisplayOrder() {
            return 303;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getDisplaylevel_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setDisplaylevel_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getDisplaylevelIndex();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setDisplaylevelIndex((Integer)raw);
          }
        });

    defineColumn(col_searchability =
        new Column(this, "searchability", new SearchabilityPoemType(), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getSearchability();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setSearchability((Searchability)cooked);
          }

          public Field asField(Persistent g) {
            return ((ColumnInfo)g).getSearchabilityField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.detail;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected int defaultDisplayOrder() {
            return 304;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getSearchability_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setSearchability_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getSearchabilityIndex();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setSearchabilityIndex((Integer)raw);
          }
        });

    defineColumn(col_displayorderpriority =
        new Column(this, "displayorderpriority", new IntegerPoemType(true), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getDisplayorderpriority();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setDisplayorderpriority((Integer)cooked);
          }

          public Field asField(Persistent g) {
            return ((ColumnInfo)g).getDisplayorderpriorityField();
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected String defaultDisplayName() {
            return "Display order priority";
          }

          protected int defaultDisplayOrder() {
            return 305;
          }

          protected String defaultDescription() {
            return "If present, the level at which lists of records are sorted by the field";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getDisplayorderpriority_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setDisplayorderpriority_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getDisplayorderpriority();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setDisplayorderpriority((Integer)raw);
          }
        });

    defineColumn(col_indexed =
        new Column(this, "indexed", new BooleanPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getIndexed();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setIndexed((Boolean)cooked);
          }

          public Field asField(Persistent g) {
            return ((ColumnInfo)g).getIndexedField();
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected int defaultDisplayOrder() {
            return 306;
          }

          protected String defaultDescription() {
            return "Whether the field is indexed (ignored if the field is marked `unique')";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getIndexed_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setIndexed_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getIndexed();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setIndexed((Boolean)raw);
          }
        });

    defineColumn(col_unique =
        new Column(this, "unique", new BooleanPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getUnique();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setUnique((Boolean)cooked);
          }

          public Field asField(Persistent g) {
            return ((ColumnInfo)g).getUniqueField();
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected int defaultDisplayOrder() {
            return 307;
          }

          protected String defaultDescription() {
            return "Whether the field is unique (implies that it's `indexed')";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getUnique_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setUnique_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getUnique();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((ColumnInfo)g).setUnique((Boolean)raw);
          }
        });
  }

  public final Column getIdColumn() {
    return col_id;
  }

  public final Column getTableinfoColumn() {
    return col_tableinfo;
  }

  public final Column getNameColumn() {
    return col_name;
  }

  public final Column getDisplayorderColumn() {
    return col_displayorder;
  }

  public final Column getUsercreateableColumn() {
    return col_usercreateable;
  }

  public final Column getDisplaylevelColumn() {
    return col_displaylevel;
  }

  public final Column getSearchabilityColumn() {
    return col_searchability;
  }

  public final Column getDisplayorderpriorityColumn() {
    return col_displayorderpriority;
  }

  public final Column getIndexedColumn() {
    return col_indexed;
  }

  public final Column getUniqueColumn() {
    return col_unique;
  }

  public ColumnInfo getColumnInfoObject(Integer troid) {
    return (ColumnInfo)getObject(troid);
  }

  public ColumnInfo getColumnInfoObject(int troid) {
    return (ColumnInfo)getObject(troid);
  }

  protected Persistent _newPersistent() {
    return new ColumnInfo();
  }
  protected String defaultDisplayName() {
    return "Column";
  }

  protected String defaultDescription() {
    return "Configuration information about a column in the database";
  }

  protected boolean defaultRememberAllTroids() {
    return true;
  }

  protected Integer defaultCacheLimit() {
    return null;
  }

  protected String defaultCategory() {
    return "System";
  }

  protected int defaultDisplayOrder() {
    return 3020;
  }
}
