// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.poem.test.generated;


import org.melati.poem.AccessPoemException;
import org.melati.poem.Column;
import org.melati.poem.Field;
import org.melati.poem.Persistent;
import org.melati.poem.ValidationPoemException;
import org.melati.poem.test.AthingTable;
import org.melati.poem.test.TestDatabaseTables;


/**
 * Melati POEM generated base class for persistent Athing.
 * Field summary for SQL table athing:
 *   id
 *   binaryfield
 *
 */
public abstract class AthingBase extends Persistent {

  public TestDatabaseTables getTestDatabaseTables() {
    return (TestDatabaseTables)getDatabase();
  }

  public AthingTable getAthingTable() {
    return (AthingTable)getTable();
  }

  private AthingTable _getAthingTable() {
    return (AthingTable)getTable();
  }

  protected Integer id;
  protected byte[] binaryfield;

  public Integer getId_unsafe() {
    return id;
  }

  public void setId_unsafe(Integer cooked) {
    id = cooked;
  }

  public Integer getId()
      throws AccessPoemException {
    readLock();
    return getId_unsafe();
  }

  public void setId(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getAthingTable().getIdColumn().getType().assertValidCooked(cooked);
    writeLock();
    setId_unsafe(cooked);
  }

  public final void setId(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(cooked));
  }

  public Field getIdField() throws AccessPoemException {
    Column c = _getAthingTable().getIdColumn();
    return new Field(c.getRaw(this), c);
  }

  public byte[] getBinaryfield_unsafe() {
    return binaryfield;
  }

  public void setBinaryfield_unsafe(byte[] cooked) {
    binaryfield = cooked;
  }

  public byte[] getBinaryfield()
      throws AccessPoemException {
    readLock();
    return getBinaryfield_unsafe();
  }

  public void setBinaryfield(byte[] cooked)
      throws AccessPoemException, ValidationPoemException {
    _getAthingTable().getBinaryfieldColumn().getType().assertValidCooked(cooked);
    writeLock();
    setBinaryfield_unsafe(cooked);
  }

  public Field getBinaryfieldField() throws AccessPoemException {
    Column c = _getAthingTable().getBinaryfieldColumn();
    return new Field(c.getRaw(this), c);
  }
}
