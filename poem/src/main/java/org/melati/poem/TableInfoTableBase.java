// Do not edit this file!  It was generated by Melati Poem's DSD preprocessor.

package org.melati.poem;

public class TableInfoTableBase extends Table {

  private Column col_id = null;
  private Column col_name = null;
  private Column col_displayname = null;
  private Column col_displayorder = null;
  private Column col_defaultcanread = null;
  private Column col_defaultcanwrite = null;
  private Column col_cancreate = null;

  public TableInfoTableBase(Database database, String name) throws PoemException {
    super(database, name, DefinitionSource.dsd);
  }

  protected void init() throws PoemException {
    defineColumn(col_id =
        new Column(this, "id", TroidPoemType.it, DefinitionSource.dsd) { 
          public Object getIdent(Data data) {
            return (Integer)((TableInfoData)data).id;
          }

          public void setIdent(Data data, Object ident) {
            ((TableInfoData)data).id = (Integer)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getId();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setId((Integer)value);
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getId();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((TableInfo)g).setId((Integer)ident);
          }
        });

    defineColumn(col_name =
        new Column(this, "name", new StringPoemType(false, 50), DefinitionSource.dsd) { 
          public Object getIdent(Data data) {
            return (String)((TableInfoData)data).name;
          }

          public void setIdent(Data data, Object ident) {
            ((TableInfoData)data).name = (String)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getName();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setName((String)value);
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getName();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((TableInfo)g).setName((String)ident);
          }
        });

    defineColumn(col_displayname =
        new Column(this, "displayname", new StringPoemType(false, 60), DefinitionSource.dsd) { 
          public Object getIdent(Data data) {
            return (String)((TableInfoData)data).displayname;
          }

          public void setIdent(Data data, Object ident) {
            ((TableInfoData)data).displayname = (String)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getDisplayname();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setDisplayname((String)value);
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getDisplayname();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((TableInfo)g).setDisplayname((String)ident);
          }
        });

    defineColumn(col_displayorder =
        new Column(this, "displayorder", new IntegerPoemType(true), DefinitionSource.dsd) { 
          public Object getIdent(Data data) {
            return (Integer)((TableInfoData)data).displayorder;
          }

          public void setIdent(Data data, Object ident) {
            ((TableInfoData)data).displayorder = (Integer)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getDisplayorder();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setDisplayorder((Integer)value);
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getDisplayorder();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((TableInfo)g).setDisplayorder((Integer)ident);
          }
        });

    defineColumn(col_defaultcanread =
        new Column(this, "defaultcanread", new ReferencePoemType(getDatabase().getCapabilityTable(), true), DefinitionSource.dsd) { 
          public Object getIdent(Data data) {
            return (Integer)((TableInfoData)data).defaultcanread;
          }

          public void setIdent(Data data, Object ident) {
            ((TableInfoData)data).defaultcanread = (Integer)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getDefaultcanread();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setDefaultcanread((Capability)value);
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getDefaultcanreadTroid();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((TableInfo)g).setDefaultcanreadTroid((Integer)ident);
          }
        });

    defineColumn(col_defaultcanwrite =
        new Column(this, "defaultcanwrite", new ReferencePoemType(getDatabase().getCapabilityTable(), true), DefinitionSource.dsd) { 
          public Object getIdent(Data data) {
            return (Integer)((TableInfoData)data).defaultcanwrite;
          }

          public void setIdent(Data data, Object ident) {
            ((TableInfoData)data).defaultcanwrite = (Integer)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getDefaultcanwrite();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setDefaultcanwrite((Capability)value);
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getDefaultcanwriteTroid();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((TableInfo)g).setDefaultcanwriteTroid((Integer)ident);
          }
        });

    defineColumn(col_cancreate =
        new Column(this, "cancreate", new ReferencePoemType(getDatabase().getCapabilityTable(), true), DefinitionSource.dsd) { 
          public Object getIdent(Data data) {
            return (Integer)((TableInfoData)data).cancreate;
          }

          public void setIdent(Data data, Object ident) {
            ((TableInfoData)data).cancreate = (Integer)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((TableInfo)g).getCancreate();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((TableInfo)g).setCancreate((Capability)value);
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((TableInfo)g).getCancreateTroid();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((TableInfo)g).setCancreateTroid((Integer)ident);
          }
        });
  }

  public final Column getIdColumn() {
    return col_id;
  }

  public final Column getNameColumn() {
    return col_name;
  }

  public final Column getDisplaynameColumn() {
    return col_displayname;
  }

  public final Column getDisplayorderColumn() {
    return col_displayorder;
  }

  public final Column getDefaultcanreadColumn() {
    return col_defaultcanread;
  }

  public final Column getDefaultcanwriteColumn() {
    return col_defaultcanwrite;
  }

  public final Column getCancreateColumn() {
    return col_cancreate;
  }

  public TableInfo getTableInfoObject(Integer troid) {
    return (TableInfo)getObject(troid);
  }

  public TableInfo getTableInfoObject(int troid) {
    return (TableInfo)getObject(troid);
  }

  protected Persistent newPersistent() {
    return new TableInfo();
  }

  protected Data _newData() {
    return new TableInfoData();
  }
}
