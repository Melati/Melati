// Do not edit this file!  It was generated by Melati Poem's DSD preprocessor.

package org.melati.poem;

class ColumnInfoBase extends Persistent {

  public final ColumnInfoFields fieldsSnapshot()
      throws AccessPoemException {
    return (ColumnInfoFields)_fieldsSnapshot();
  }

  protected final ColumnInfoFields fieldsForReading()
      throws AccessPoemException {
    return (ColumnInfoFields)_fieldsForReading();
  }

  protected final ColumnInfoFields fieldsForWriting()
      throws AccessPoemException {
    return (ColumnInfoFields)_fieldsForWriting();
  }

  public ColumnInfoTable getColumnInfoTable() {
    return (ColumnInfoTable)getTable();
  }

  public Integer getId()
      throws AccessPoemException {
    return fieldsForReading().id;
  }

  public void setId(Integer value)
      throws AccessPoemException, ValidationPoemException {
    getColumnInfoTable().getIdColumn().getType().assertValidValue(value);
    fieldsForWriting().id = value;
  }

  public final void setId(int value)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(value));
  }

  public Integer getTableinfoTroid()
      throws AccessPoemException {
    return fieldsForReading().tableinfo;
  }

  public void setTableinfoTroid(Integer ident)
      throws AccessPoemException {
    fieldsForWriting().tableinfo = ident;
  }

  public TableInfo getTableinfo()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getTableinfoTroid();
    return troid == null ? null :
        getDatabase().getTableInfoTable().getTableInfoObject(troid);
  }

  public void setTableinfo(TableInfo value)
      throws AccessPoemException {
    setTableinfoTroid(value == null ? null : value.getTroid());
  }

  public String getName()
      throws AccessPoemException {
    return fieldsForReading().name;
  }

  public void setName(String value)
      throws AccessPoemException, ValidationPoemException {
    getColumnInfoTable().getNameColumn().getType().assertValidValue(value);
    fieldsForWriting().name = value;
  }

  public Integer getTypecode()
      throws AccessPoemException {
    return fieldsForReading().typecode;
  }

  public void setTypecode(Integer value)
      throws AccessPoemException, ValidationPoemException {
    getColumnInfoTable().getTypecodeColumn().getType().assertValidValue(value);
    fieldsForWriting().typecode = value;
  }

  public final void setTypecode(int value)
      throws AccessPoemException, ValidationPoemException {
    setTypecode(new Integer(value));
  }

  public Boolean getNullable()
      throws AccessPoemException {
    return fieldsForReading().nullable;
  }

  public void setNullable(Boolean value)
      throws AccessPoemException, ValidationPoemException {
    getColumnInfoTable().getNullableColumn().getType().assertValidValue(value);
    fieldsForWriting().nullable = value;
  }

  public final void setNullable(boolean value)
      throws AccessPoemException, ValidationPoemException {
    setNullable(value ? Boolean.TRUE : Boolean.FALSE);
  }

  public Integer getSize()
      throws AccessPoemException {
    return fieldsForReading().size;
  }

  public void setSize(Integer value)
      throws AccessPoemException, ValidationPoemException {
    getColumnInfoTable().getSizeColumn().getType().assertValidValue(value);
    fieldsForWriting().size = value;
  }

  public final void setSize(int value)
      throws AccessPoemException, ValidationPoemException {
    setSize(new Integer(value));
  }

  public Integer getTargettableTroid()
      throws AccessPoemException {
    return fieldsForReading().targettable;
  }

  public void setTargettableTroid(Integer ident)
      throws AccessPoemException {
    fieldsForWriting().targettable = ident;
  }

  public TableInfo getTargettable()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getTargettableTroid();
    return troid == null ? null :
        getDatabase().getTableInfoTable().getTableInfoObject(troid);
  }

  public void setTargettable(TableInfo value)
      throws AccessPoemException {
    setTargettableTroid(value == null ? null : value.getTroid());
  }

  protected Fields _newFields() {
    return new ColumnInfoFields();
  }
}
