// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.poem.odmg.playing.generated;

import org.melati.poem.odmg.playing.*;
import java.util.*;
import java.sql.Date;
import java.sql.Timestamp;
import org.melati.poem.*;

public class ChildTableBase extends Table {

  private Column col_id = null;
  private Column col_name = null;
  private Column col_parent = null;

  public ChildTableBase(
      Database database, String name,
      DefinitionSource definitionSource) throws PoemException {
    super(database, name, definitionSource);
  }

  public ChildTableBase(
      Database database, String name) throws PoemException {
    this(database, name, DefinitionSource.dsd);
  }

  public PlayingDatabase getPlayingDatabase() {
    return (PlayingDatabase)getDatabase();  }

  protected void init() throws PoemException {
    super.init();
    defineColumn(col_id =
        new Column(this, "id", new TroidPoemType(), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Child)g).getId();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Child)g).setId((Integer)cooked);
          }

          public Field asField(Persistent g) {
            return ((Child)g).getIdField();
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected int defaultDisplayOrder() {
            return 0;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Child)g).getId_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Child)g).setId_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Child)g).getId();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Child)g).setId((Integer)raw);
          }
        });

    defineColumn(col_name =
        new Column(this, "name", new StringPoemType(false, 60), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Child)g).getName();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Child)g).setName((String)cooked);
          }

          public Field asField(Persistent g) {
            return ((Child)g).getNameField();
          }

          protected int defaultDisplayOrder() {
            return 1;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Child)g).getName_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Child)g).setName_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Child)g).getName();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Child)g).setName((String)raw);
          }
        });

    defineColumn(col_parent =
        new Column(this, "parent", new ReferencePoemType(((PlayingDatabase)getDatabase()).getParentTable(), false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Child)g).getParent();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Child)g).setParent((Parent)cooked);
          }

          public Field asField(Persistent g) {
            return ((Child)g).getParentField();
          }

          protected int defaultDisplayOrder() {
            return 2;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Child)g).getParent_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Child)g).setParent_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Child)g).getParentTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Child)g).setParentTroid((Integer)raw);
          }
        });
  }

  public final Column getIdColumn() {
    return col_id;
  }

  public final Column getNameColumn() {
    return col_name;
  }

  public final Column getParentColumn() {
    return col_parent;
  }

  public Child getChildObject(Integer troid) {
    return (Child)getObject(troid);
  }

  public Child getChildObject(int troid) {
    return (Child)getObject(troid);
  }

  protected Persistent _newPersistent() {
    return new Child();
  }
  protected int defaultDisplayOrder() {
    return 1;
  }
}
