// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.poem.generated;

import org.melati.poem.*;
import java.util.*;
import java.sql.Date;
import java.sql.Timestamp;

public abstract class GroupCapabilityBase extends Persistent {

  public PoemDatabase getPoemDatabase() {
    return (PoemDatabase)getDatabase();
  }

  public GroupCapabilityTable getGroupCapabilityTable() {
    return (GroupCapabilityTable)getTable();
  }

  private GroupCapabilityTable _getGroupCapabilityTable() {
    return (GroupCapabilityTable)getTable();
  }

  protected Integer id;
  protected Integer group;
  protected Integer capability;

  public Integer getId_unsafe() {
    return id;
  }

  public void setId_unsafe(Integer cooked) {
    id = cooked;
  }

  public Integer getId()
      throws AccessPoemException {
    readLock();
    return getId_unsafe();
  }

  public void setId(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getGroupCapabilityTable().getIdColumn().getType().assertValidCooked(cooked);
    writeLock();
    setId_unsafe(cooked);
  }

  public final void setId(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(cooked));
  }

  public Field getIdField() throws AccessPoemException {
    Column c = _getGroupCapabilityTable().getIdColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getGroup_unsafe() {
    return group;
  }

  public void setGroup_unsafe(Integer cooked) {
    group = cooked;
  }

  public Integer getGroupTroid()
      throws AccessPoemException {
    readLock();
    return getGroup_unsafe();
  }

  public void setGroupTroid(Integer raw)
      throws AccessPoemException {
    setGroup(raw == null ? null : getPoemDatabase().getGroupTable().getGroupObject(raw));
  }

  public Group getGroup()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getGroupTroid();
    return troid == null ? null :
        getPoemDatabase().getGroupTable().getGroupObject(troid);
  }

  public void setGroup(Group cooked)
      throws AccessPoemException {
    _getGroupCapabilityTable().getGroupColumn().getType().assertValidCooked(cooked);
    writeLock();
    if (cooked == null)
      setGroup_unsafe(null);
    else {
      cooked.existenceLock();
      setGroup_unsafe(cooked.troid());
    }
  }

  public Field getGroupField() throws AccessPoemException {
    Column c = _getGroupCapabilityTable().getGroupColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getCapability_unsafe() {
    return capability;
  }

  public void setCapability_unsafe(Integer cooked) {
    capability = cooked;
  }

  public Integer getCapabilityTroid()
      throws AccessPoemException {
    readLock();
    return getCapability_unsafe();
  }

  public void setCapabilityTroid(Integer raw)
      throws AccessPoemException {
    setCapability(raw == null ? null : getPoemDatabase().getCapabilityTable().getCapabilityObject(raw));
  }

  public Capability getCapability()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getCapabilityTroid();
    return troid == null ? null :
        getPoemDatabase().getCapabilityTable().getCapabilityObject(troid);
  }

  public void setCapability(Capability cooked)
      throws AccessPoemException {
    _getGroupCapabilityTable().getCapabilityColumn().getType().assertValidCooked(cooked);
    writeLock();
    if (cooked == null)
      setCapability_unsafe(null);
    else {
      cooked.existenceLock();
      setCapability_unsafe(cooked.troid());
    }
  }

  public Field getCapabilityField() throws AccessPoemException {
    Column c = _getGroupCapabilityTable().getCapabilityColumn();
    return new Field(c.getRaw(this), c);
  }
}
