// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.doc.example.contacts.generated;

import org.melati.doc.example.contacts.*;
import java.util.*;
import java.sql.Date;
import java.sql.Timestamp;
import org.melati.poem.*;

public abstract class ContactBase extends Persistent {

  public ContactsDatabase getContactsDatabase() {
    return (ContactsDatabase)getDatabase();
  }

  public ContactTable getContactTable() {
    return (ContactTable)getTable();
  }

  private ContactTable _getContactTable() {
    return (ContactTable)getTable();
  }

  protected Integer id;
  protected String name;
  protected String address;
  protected Integer updates;
  protected Date lastupdated;
  protected Integer lastupdateuser;

  public Integer getId_unsafe() {
    return id;
  }

  public void setId_unsafe(Integer cooked) {
    id = cooked;
  }

  public Integer getId()
      throws AccessPoemException {
    readLock();
    return getId_unsafe();
  }

  public void setId(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getContactTable().getIdColumn().getType().assertValidCooked(cooked);
    writeLock();
    setId_unsafe(cooked);
  }

  public final void setId(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(cooked));
  }

  public Field getIdField() throws AccessPoemException {
    Column c = _getContactTable().getIdColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getName_unsafe() {
    return name;
  }

  public void setName_unsafe(String cooked) {
    name = cooked;
  }

  public String getName()
      throws AccessPoemException {
    readLock();
    return getName_unsafe();
  }

  public void setName(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getContactTable().getNameColumn().getType().assertValidCooked(cooked);
    writeLock();
    setName_unsafe(cooked);
  }

  public Field getNameField() throws AccessPoemException {
    Column c = _getContactTable().getNameColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getAddress_unsafe() {
    return address;
  }

  public void setAddress_unsafe(String cooked) {
    address = cooked;
  }

  public String getAddress()
      throws AccessPoemException {
    readLock();
    return getAddress_unsafe();
  }

  public void setAddress(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getContactTable().getAddressColumn().getType().assertValidCooked(cooked);
    writeLock();
    setAddress_unsafe(cooked);
  }

  public Field getAddressField() throws AccessPoemException {
    Column c = _getContactTable().getAddressColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getUpdates_unsafe() {
    return updates;
  }

  public void setUpdates_unsafe(Integer cooked) {
    updates = cooked;
  }

  public Integer getUpdates()
      throws AccessPoemException {
    readLock();
    return getUpdates_unsafe();
  }

  public void setUpdates(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getContactTable().getUpdatesColumn().getType().assertValidCooked(cooked);
    writeLock();
    setUpdates_unsafe(cooked);
  }

  public final void setUpdates(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setUpdates(new Integer(cooked));
  }

  public Field getUpdatesField() throws AccessPoemException {
    Column c = _getContactTable().getUpdatesColumn();
    return new Field(c.getRaw(this), c);
  }

  public Date getLastupdated_unsafe() {
    return lastupdated;
  }

  public void setLastupdated_unsafe(Date cooked) {
    lastupdated = cooked;
  }

  public Date getLastupdated()
      throws AccessPoemException {
    readLock();
    return getLastupdated_unsafe();
  }

  public void setLastupdated(Date cooked)
      throws AccessPoemException, ValidationPoemException {
    _getContactTable().getLastupdatedColumn().getType().assertValidCooked(cooked);
    writeLock();
    setLastupdated_unsafe(cooked);
  }

  public Field getLastupdatedField() throws AccessPoemException {
    Column c = _getContactTable().getLastupdatedColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getLastupdateuser_unsafe() {
    return lastupdateuser;
  }

  public void setLastupdateuser_unsafe(Integer cooked) {
    lastupdateuser = cooked;
  }

  public Integer getLastupdateuserTroid()
      throws AccessPoemException {
    readLock();
    return getLastupdateuser_unsafe();
  }

  public void setLastupdateuserTroid(Integer raw)
      throws AccessPoemException {
    _getContactTable().getLastupdateuserColumn().getType().assertValidRaw(raw);
    writeLock();
    setLastupdateuser_unsafe(raw);
  }

  public User getLastupdateuser()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getLastupdateuserTroid();
    return troid == null ? null :
        getContactsDatabase().getUserTable().getUserObject(troid);
  }

  public void setLastupdateuser(User cooked)
      throws AccessPoemException {
    setLastupdateuserTroid(cooked == null ? null : cooked.troid());
  }

  public Field getLastupdateuserField() throws AccessPoemException {
    Column c = _getContactTable().getLastupdateuserColumn();
    return new Field(c.getRaw(this), c);
  }
}
