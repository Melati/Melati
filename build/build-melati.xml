<?xml version="1.0"?>

<!-- Ant Build file for Melati -->
<!-- cvs="$Id Exp $" -->

<project name="melati" default="main" basedir="." >

    <target name="init">
        <property name="Name" value="melati"/>
        <property name="version" value="snapshot"/>
        <property name="project" value="melati"/>
        <property name="build.compiler" value="${JAVAC}"/>
        <property name="build.src" value="../../.."/>
        <property name="build.dist" value="../../../../dist"/>
        <property name="build.built" value="../../../../built"/>
        <property name="build.javadoc" value="${build.built}/docs"/>
        <property name="final.name" value="${project}-${version}"/>
        <property name="final.dir" value="../../../../${final.name}/"/>
        <property name="year" value="2000"/>
        <property name="ant.home" value="."/>
        <property name="debug" value="on"/>
        <property name="optimize" value="off"/>
        <property name="deprecation" value="on"/>
        
        <property name="poemODMGDSD" value="${build.src}/org/melati/poem/odmg/playing/Playing.dsd"/>
        
        <filter token="year" value="${year}"/>
        <filter token="version" value="${version}"/>
        <filter token="date" value="${TODAY}"/>        
    </target>

    <!-- =================================================================== -->
    <!-- Prepares the build directory                                        -->
    <!-- =================================================================== -->
    <target name="prepare" depends="init">
        <mkdir dir="${build.dist}"/>
        <mkdir dir="${build.built}"/>
        <copydir src="${build.src}" dest="${build.dist}"
            includes="**/*.properties"
            excludes="**/poem/odmg/playing/**/*.properties"
            filtering="on"/>
        <copydir src="${build.src}" dest="${build.dist}"
            includes="**/*.properties.example"
            filtering="on"/>
        <renameext srcDir="${build.dist}" 
            includes="**/*.properties.example" 
            fromExtension=".properties.example" 
            toExtension=".properties" 
            replace="true"/>
        <copydir src="${build.src}" dest="${build.dist}"
            includes="**/*.wm"
            excludes="**/doc/**/*.wm **/playing/**/*.wm"
            filtering="on"/>
        <copydir src="${build.src}" dest="${build.dist}"
            includes="**/*.js"
            filtering="on"/>
        <copydir src="${build.src}" dest="${build.dist}"
            includes="org/melati/admin/**/*.html"
            filtering="on"/>
        <copydir src="${build.src}" dest="${build.dist}"
            includes="org/melati/admin/**/*.gif"
            filtering="on"/>

    </target>

    <!-- =================================================================== -->
    <!-- Compiles the source directory                                       -->
    <!-- =================================================================== -->
    <target name="compile" depends="prepare">
        <javac srcdir="${build.src}"
            destdir="${build.dist}"
            includes="**/*.java"
            excludes="**/playing/**/*.java **/doc/example/**/*.java **/test/**/*.java **/template/**/*.java"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}"/>
    </target>
  
    <!-- =================================================================== -->
    <!-- Compiles the source directory and creates a .jar file               -->
    <!-- =================================================================== -->
<!-- don't include properties and wm files in jar -->
<!--
    <target name="jar" depends="compile">
        <jar jarfile="${build.jar.dir}/${final.name}.jar"
            basedir="${build.dist}"
            includes="**/*.class **/*.properties **/*.wm"
        />
-->
        <target name="jar" depends="compile">
        <jar jarfile="${build.built}/${final.name}.jar"
            basedir="${build.dist}"
            includes="**/*.class"
        />
        <copydir src="${build.dist}" dest="${build.built}"
            includes="**/*.js"
            filtering="on"/>
        <copydir src="${build.dist}" dest="${build.built}"
            includes="**/*.properties"
            filtering="on"/>
        <copydir src="${build.dist}" dest="${build.built}"
            includes="**/*.wm"
            filtering="on"/>
        <copydir src="${build.dist}" dest="${build.built}"
            includes="**/*.html"
            filtering="on"/>
        <copydir src="${build.dist}" dest="${build.built}"
            includes="**/*.gif"
            filtering="on"/>
        <zip zipfile="${build.built}/${final.name}.src.zip" 
            basedir="${build.src}" 
            includes="**/*.java"/>
    </target>
    
    <!-- =================================================================== -->
    <!-- Runs the pre-processor to generate the poem support classes         -->
    <!-- =================================================================== -->
    <target name="preproODMGPlaying" depends="jar">
       <java classname="org.melati.poem.prepro.DSD"
             fork="yes"
             args="${poemODMGDSD}"
             jvmargs=""
       />
    </target>

    <!-- =================================================================== -->
    <!-- Compiles the source directory                                       -->
    <!-- =================================================================== -->
    <target name="compileODMGPlaying" depends="preproODMGPlaying">
        <javac srcdir="${build.src}"
            destdir="${build.dist}"
            includes="org/melati/poem/odmg/playing/**/*.java"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}"/>
    </target>
  
    <!-- =================================================================== -->
    <!-- Compiles the source directory and creates a .jar file               -->
    <!-- =================================================================== -->
    <target name="jarODMGPlaying" depends="compileODMGPlaying">
        <jar jarfile="${build.built}/${final.name}.ODMGPlaying.jar"
            basedir="${build.dist}"
            includes="**/*.class **/*.properties"
        />
    </target>
    
    <!-- =================================================================== -->
    <!-- Runs the pre-processor to generate the poem support classes         -->
    <!-- =================================================================== -->
    <target name="runODMGPlaying" depends="jarODMGPlaying">
       <java classname="org.melati.poem.odmg.playing.PlayingTest"
             fork="yes"
             args=""
             jvmargs=""
       />
    </target>

    <!-- =================================================================== -->
    <!-- Creates the API documentation                                       -->
    <!-- =================================================================== -->
    <target name="javadocs" depends="prepare">
        <mkdir dir="${build.javadoc}"/>
        <javadoc
            includes="**/*.java"
            excludes="**/playing/**/*.java **/doc/example/**/*.java **/test/**/*.java **/template/**/*.java"
            sourcepath="${build.src}"
            sourcefiles=""
            packagenames="org.*"
            destdir="${build.javadoc}"
            author="true"
            private="true"
            version="true"
            use="true"
            windowtitle="${Name} ${version} API"
            doctitle="${Name} ${version} API"
            bottom="Copyright &#169; ${year} &lt;i&gt;melati&lt;/i&gt;. All Rights Reserved."
        />
    </target>
    
    <!-- =================================================================== -->
    <!-- Package as .zip and .tgz                                            -->
    <!-- =================================================================== -->
<!-- fixme - put back javadocs
    <target name="package" depends="jar,javadocs">
-->
    <target name="package" depends="jar,javadocs">
        <mkdir dir="${final.dir}"/>
        <zip zipfile="${final.dir}/${Name}-${version}.zip" basedir="${build.built}"/>
        <tar tarfile="${final.dir}/${Name}-${version}.tar" basedir="${build.built}"/>
       <gzip zipfile="${final.dir}/${Name}-${version}.tar.gz" src="${final.dir}/${Name}-${version}.tar"/>
    </target>
    
    
    <!-- =================================================================== -->
    <!-- Cleans up the build directory                                       -->
    <!-- =================================================================== -->
    <target name="clean">
        <deltree dir="${build.dist}"/>
        <deltree dir="${build.built}"/>
        <deltree dir="${final.dir}"/>
    </target>
</project>
