// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.doc.example;

import java.util.*;
import java.sql.Date;
import java.sql.Timestamp;
import org.melati.util.*;
import org.melati.poem.*;

public class OrderBase extends Persistent {

  public ExampleDatabase getExampleDatabase() {
    return (ExampleDatabase)getDatabase();
  }

  public OrderTable getOrderTable() {
    return (OrderTable)getTable();
  }

  private OrderTable _getOrderTable() {
    return (OrderTable)getTable();
  }

  Integer id;
  Integer buyer;
  Integer product;
  Boolean urgent;

  public Integer getId_unsafe() {
    return id;
  }

  public void setId_unsafe(Integer cooked) {
    id = cooked;
  }

  public Integer getId()
      throws AccessPoemException {
    readLock();
    return getId_unsafe();
  }

  public void setId(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getOrderTable().getIdColumn().getType().assertValidCooked(cooked);
    writeLock();
    setId_unsafe(cooked);
  }

  public final void setId(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(cooked));
  }

  public Field getIdField() throws AccessPoemException {
    return Field.of(this, _getOrderTable().getIdColumn());
  }

  public Integer getBuyer_unsafe() {
    return buyer;
  }

  public void setBuyer_unsafe(Integer cooked) {
    buyer = cooked;
  }

  public Integer getBuyerTroid()
      throws AccessPoemException {
    readLock();
    return getBuyer_unsafe();
  }

  public void setBuyerTroid(Integer raw)
      throws AccessPoemException {
    getOrderTable().getBuyerColumn().getType().assertValidRaw(raw);
    writeLock();
    setBuyer_unsafe(raw);
  }

  public Buyer getBuyer()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getBuyerTroid();
    return troid == null ? null :
        getExampleDatabase().getBuyerTable().getBuyerObject(troid);
  }

  public void setBuyer(Buyer cooked)
      throws AccessPoemException {
    setBuyerTroid(cooked == null ? null : cooked.troid());
  }

  public Field getBuyerField() throws AccessPoemException {
    return Field.of(this, _getOrderTable().getBuyerColumn());
  }

  public Integer getProduct_unsafe() {
    return product;
  }

  public void setProduct_unsafe(Integer cooked) {
    product = cooked;
  }

  public Integer getProductTroid()
      throws AccessPoemException {
    readLock();
    return getProduct_unsafe();
  }

  public void setProductTroid(Integer raw)
      throws AccessPoemException {
    getOrderTable().getProductColumn().getType().assertValidRaw(raw);
    writeLock();
    setProduct_unsafe(raw);
  }

  public Product getProduct()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getProductTroid();
    return troid == null ? null :
        getExampleDatabase().getProductTable().getProductObject(troid);
  }

  public void setProduct(Product cooked)
      throws AccessPoemException {
    setProductTroid(cooked == null ? null : cooked.troid());
  }

  public Field getProductField() throws AccessPoemException {
    return Field.of(this, _getOrderTable().getProductColumn());
  }

  public Boolean getUrgent_unsafe() {
    return urgent;
  }

  public void setUrgent_unsafe(Boolean cooked) {
    urgent = cooked;
  }

  public Boolean getUrgent()
      throws AccessPoemException {
    readLock();
    return getUrgent_unsafe();
  }

  public void setUrgent(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getOrderTable().getUrgentColumn().getType().assertValidCooked(cooked);
    writeLock();
    setUrgent_unsafe(cooked);
  }

  public final void setUrgent(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setUrgent(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getUrgentField() throws AccessPoemException {
    return Field.of(this, _getOrderTable().getUrgentColumn());
  }
}
