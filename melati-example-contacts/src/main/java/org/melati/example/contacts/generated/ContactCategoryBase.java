// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.doc.example.contacts.generated;

import org.melati.doc.example.contacts.*;
import java.util.*;
import java.sql.Date;
import java.sql.Timestamp;
import org.melati.poem.*;

public abstract class ContactCategoryBase extends Persistent {

  public ContactsDatabaseTables getContactsDatabaseTables() {
    return (ContactsDatabaseTables)getDatabase();
  }

  public ContactCategoryTable getContactCategoryTable() {
    return (ContactCategoryTable)getTable();
  }

  private ContactCategoryTable _getContactCategoryTable() {
    return (ContactCategoryTable)getTable();
  }

  protected Integer id;
  protected Integer category;
  protected Integer contact;

  public Integer getId_unsafe() {
    return id;
  }

  public void setId_unsafe(Integer cooked) {
    id = cooked;
  }

  public Integer getId()
      throws AccessPoemException {
    readLock();
    return getId_unsafe();
  }

  public void setId(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getContactCategoryTable().getIdColumn().getType().assertValidCooked(cooked);
    writeLock();
    setId_unsafe(cooked);
  }

  public final void setId(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(cooked));
  }

  public Field getIdField() throws AccessPoemException {
    Column c = _getContactCategoryTable().getIdColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getCategory_unsafe() {
    return category;
  }

  public void setCategory_unsafe(Integer cooked) {
    category = cooked;
  }

  public Integer getCategoryTroid()
      throws AccessPoemException {
    readLock();
    return getCategory_unsafe();
  }

  public void setCategoryTroid(Integer raw)
      throws AccessPoemException {
    setCategory(raw == null ? null : 
        getContactsDatabaseTables().getCategoryTable().getCategoryObject(raw));
  }

  public Category getCategory()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getCategoryTroid();
    return troid == null ? null :
        getContactsDatabaseTables().getCategoryTable().getCategoryObject(troid);
  }

  public void setCategory(Category cooked)
      throws AccessPoemException {
    _getContactCategoryTable().getCategoryColumn().getType().assertValidCooked(cooked);
    writeLock();
    if (cooked == null)
      setCategory_unsafe(null);
    else {
      cooked.existenceLock();
      setCategory_unsafe(cooked.troid());
    }
  }

  public Field getCategoryField() throws AccessPoemException {
    Column c = _getContactCategoryTable().getCategoryColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getContact_unsafe() {
    return contact;
  }

  public void setContact_unsafe(Integer cooked) {
    contact = cooked;
  }

  public Integer getContactTroid()
      throws AccessPoemException {
    readLock();
    return getContact_unsafe();
  }

  public void setContactTroid(Integer raw)
      throws AccessPoemException {
    setContact(raw == null ? null : 
        getContactsDatabaseTables().getContactTable().getContactObject(raw));
  }

  public Contact getContact()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getContactTroid();
    return troid == null ? null :
        getContactsDatabaseTables().getContactTable().getContactObject(troid);
  }

  public void setContact(Contact cooked)
      throws AccessPoemException {
    _getContactCategoryTable().getContactColumn().getType().assertValidCooked(cooked);
    writeLock();
    if (cooked == null)
      setContact_unsafe(null);
    else {
      cooked.existenceLock();
      setContact_unsafe(cooked.troid());
    }
  }

  public Field getContactField() throws AccessPoemException {
    Column c = _getContactCategoryTable().getContactColumn();
    return new Field(c.getRaw(this), c);
  }
}
