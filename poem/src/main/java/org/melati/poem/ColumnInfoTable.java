// Do not edit this file!  It was generated by Melati Poem's DSD preprocessor.

package org.melati.poem;

public class ColumnInfoTable extends Table {

  private Column col_id = null;
  private Column col_tableinfo = null;
  private Column col_name = null;
  private Column col_typecode = null;
  private Column col_nullable = null;
  private Column col_size = null;
  private Column col_targettable = null;

  public ColumnInfoTable(Database database, String name) throws PoemException {
    super(database, name, DefinitionSource.dsd);
  }

  protected void init() throws PoemException {
    defineColumn(col_id =
        new Column(this, "id", TroidPoemType.it, DefinitionSource.dsd) { 
          public Object getIdent(Fields fields) {
            return (Integer)((ColumnInfoFields)fields).id;
          }

          public void setIdent(Fields fields, Object ident) {
            ((ColumnInfoFields)fields).id = (Integer)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getId();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setId((Integer)value);
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getId();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((ColumnInfo)g).setId((Integer)ident);
          }
        });

    defineColumn(col_tableinfo =
        new Column(this, "tableinfo", new ReferencePoemType(getDatabase().getTableInfoTable(), false), DefinitionSource.dsd) { 
          public Object getIdent(Fields fields) {
            return (Integer)((ColumnInfoFields)fields).tableinfo;
          }

          public void setIdent(Fields fields, Object ident) {
            ((ColumnInfoFields)fields).tableinfo = (Integer)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getTableinfo();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setTableinfo((TableInfo)value);
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getTableinfoTroid();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((ColumnInfo)g).setTableinfoTroid((Integer)ident);
          }
        });

    defineColumn(col_name =
        new Column(this, "name", new StringPoemType(false, 50), DefinitionSource.dsd) { 
          public Object getIdent(Fields fields) {
            return (String)((ColumnInfoFields)fields).name;
          }

          public void setIdent(Fields fields, Object ident) {
            ((ColumnInfoFields)fields).name = (String)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getName();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setName((String)value);
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getName();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((ColumnInfo)g).setName((String)ident);
          }
        });

    defineColumn(col_typecode =
        new Column(this, "typecode", new IntegerPoemType(false), DefinitionSource.dsd) { 
          public Object getIdent(Fields fields) {
            return (Integer)((ColumnInfoFields)fields).typecode;
          }

          public void setIdent(Fields fields, Object ident) {
            ((ColumnInfoFields)fields).typecode = (Integer)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getTypecode();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setTypecode((Integer)value);
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getTypecode();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((ColumnInfo)g).setTypecode((Integer)ident);
          }
        });

    defineColumn(col_nullable =
        new Column(this, "nullable", new BooleanPoemType(false), DefinitionSource.dsd) { 
          public Object getIdent(Fields fields) {
            return (Boolean)((ColumnInfoFields)fields).nullable;
          }

          public void setIdent(Fields fields, Object ident) {
            ((ColumnInfoFields)fields).nullable = (Boolean)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getNullable();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setNullable((Boolean)value);
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getNullable();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((ColumnInfo)g).setNullable((Boolean)ident);
          }
        });

    defineColumn(col_size =
        new Column(this, "size", new IntegerPoemType(false), DefinitionSource.dsd) { 
          public Object getIdent(Fields fields) {
            return (Integer)((ColumnInfoFields)fields).size;
          }

          public void setIdent(Fields fields, Object ident) {
            ((ColumnInfoFields)fields).size = (Integer)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getSize();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setSize((Integer)value);
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getSize();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((ColumnInfo)g).setSize((Integer)ident);
          }
        });

    defineColumn(col_targettable =
        new Column(this, "targettable", new ReferencePoemType(getDatabase().getTableInfoTable(), true), DefinitionSource.dsd) { 
          public Object getIdent(Fields fields) {
            return (Integer)((ColumnInfoFields)fields).targettable;
          }

          public void setIdent(Fields fields, Object ident) {
            ((ColumnInfoFields)fields).targettable = (Integer)ident;
          }

          public Object getValue(Persistent g)
              throws AccessPoemException, PoemException {
            return ((ColumnInfo)g).getTargettable();
          }

          public void setValue(Persistent g, Object value)
              throws AccessPoemException, ValidationPoemException {
            ((ColumnInfo)g).setTargettable((TableInfo)value);
          }

          public Object getIdent(Persistent g)
              throws AccessPoemException {
            return ((ColumnInfo)g).getTargettableTroid();
          }

          public void setIdent(Persistent g, Object ident)
              throws AccessPoemException {
            ((ColumnInfo)g).setTargettableTroid((Integer)ident);
          }
        });
  }

  public Column getIdColumn() {
    return col_id;
  }

  public Column getTableinfoColumn() {
    return col_tableinfo;
  }

  public Column getNameColumn() {
    return col_name;
  }

  public Column getTypecodeColumn() {
    return col_typecode;
  }

  public Column getNullableColumn() {
    return col_nullable;
  }

  public Column getSizeColumn() {
    return col_size;
  }

  public Column getTargettableColumn() {
    return col_targettable;
  }

  public ColumnInfo getColumnInfoObject(Integer troid) {
    return (ColumnInfo)getObject(troid);
  }

  protected Persistent newPersistent() {
    return new ColumnInfo();
  }
}
