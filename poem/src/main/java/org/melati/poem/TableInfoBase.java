// Do not edit this file!  It was generated by Melati Poem's DSD preprocessor.

package org.melati.poem;

public class TableInfoBase extends Persistent {

  public final TableInfoData dataSnapshot()
      throws AccessPoemException {
    return (TableInfoData)_dataSnapshot();
  }

  protected final TableInfoData dataForReading()
      throws AccessPoemException {
    return (TableInfoData)_dataForReading();
  }

  protected final TableInfoData dataForWriting()
      throws AccessPoemException {
    return (TableInfoData)_dataForWriting();
  }

  public TableInfoTable getTableInfoTable() {
    return (TableInfoTable)getTable();
  }

  public Integer getId()
      throws AccessPoemException {
    return dataForReading().id;
  }

  public void setId(Integer value)
      throws AccessPoemException, ValidationPoemException {
    getTableInfoTable().getIdColumn().getType().assertValidValue(value);
    dataForWriting().id = value;
  }

  public final void setId(int value)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(value));
  }

  public final Field getIdField() throws AccessPoemException {
    return getTableInfoTable().getIdColumn().asField(this);
  }

  public String getName()
      throws AccessPoemException {
    return dataForReading().name;
  }

  public void setName(String value)
      throws AccessPoemException, ValidationPoemException {
    getTableInfoTable().getNameColumn().getType().assertValidValue(value);
    dataForWriting().name = value;
  }

  public final Field getNameField() throws AccessPoemException {
    return getTableInfoTable().getNameColumn().asField(this);
  }

  public String getDisplayname()
      throws AccessPoemException {
    return dataForReading().displayname;
  }

  public void setDisplayname(String value)
      throws AccessPoemException, ValidationPoemException {
    getTableInfoTable().getDisplaynameColumn().getType().assertValidValue(value);
    dataForWriting().displayname = value;
  }

  public final Field getDisplaynameField() throws AccessPoemException {
    return getTableInfoTable().getDisplaynameColumn().asField(this);
  }

  public String getDescription()
      throws AccessPoemException {
    return dataForReading().description;
  }

  public void setDescription(String value)
      throws AccessPoemException, ValidationPoemException {
    getTableInfoTable().getDescriptionColumn().getType().assertValidValue(value);
    dataForWriting().description = value;
  }

  public final Field getDescriptionField() throws AccessPoemException {
    return getTableInfoTable().getDescriptionColumn().asField(this);
  }

  public Integer getDisplayorder()
      throws AccessPoemException {
    return dataForReading().displayorder;
  }

  public void setDisplayorder(Integer value)
      throws AccessPoemException, ValidationPoemException {
    getTableInfoTable().getDisplayorderColumn().getType().assertValidValue(value);
    dataForWriting().displayorder = value;
  }

  public final void setDisplayorder(int value)
      throws AccessPoemException, ValidationPoemException {
    setDisplayorder(new Integer(value));
  }

  public final Field getDisplayorderField() throws AccessPoemException {
    return getTableInfoTable().getDisplayorderColumn().asField(this);
  }

  public Integer getDefaultcanreadTroid()
      throws AccessPoemException {
    return dataForReading().defaultcanread;
  }

  public void setDefaultcanreadTroid(Integer ident)
      throws AccessPoemException {
    dataForWriting().defaultcanread = ident;
  }

  public Capability getDefaultcanread()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getDefaultcanreadTroid();
    return troid == null ? null :
        getDatabase().getCapabilityTable().getCapabilityObject(troid);
  }

  public void setDefaultcanread(Capability value)
      throws AccessPoemException {
    setDefaultcanreadTroid(value == null ? null : value.troid());
  }

  public final Field getDefaultcanreadField() throws AccessPoemException {
    return getTableInfoTable().getDefaultcanreadColumn().asField(this);
  }

  public Integer getDefaultcanwriteTroid()
      throws AccessPoemException {
    return dataForReading().defaultcanwrite;
  }

  public void setDefaultcanwriteTroid(Integer ident)
      throws AccessPoemException {
    dataForWriting().defaultcanwrite = ident;
  }

  public Capability getDefaultcanwrite()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getDefaultcanwriteTroid();
    return troid == null ? null :
        getDatabase().getCapabilityTable().getCapabilityObject(troid);
  }

  public void setDefaultcanwrite(Capability value)
      throws AccessPoemException {
    setDefaultcanwriteTroid(value == null ? null : value.troid());
  }

  public final Field getDefaultcanwriteField() throws AccessPoemException {
    return getTableInfoTable().getDefaultcanwriteColumn().asField(this);
  }

  public Integer getCancreateTroid()
      throws AccessPoemException {
    return dataForReading().cancreate;
  }

  public void setCancreateTroid(Integer ident)
      throws AccessPoemException {
    dataForWriting().cancreate = ident;
  }

  public Capability getCancreate()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getCancreateTroid();
    return troid == null ? null :
        getDatabase().getCapabilityTable().getCapabilityObject(troid);
  }

  public void setCancreate(Capability value)
      throws AccessPoemException {
    setCancreateTroid(value == null ? null : value.troid());
  }

  public final Field getCancreateField() throws AccessPoemException {
    return getTableInfoTable().getCancreateColumn().asField(this);
  }

  public Integer getCachelimit()
      throws AccessPoemException {
    return dataForReading().cachelimit;
  }

  public void setCachelimit(Integer value)
      throws AccessPoemException, ValidationPoemException {
    getTableInfoTable().getCachelimitColumn().getType().assertValidValue(value);
    dataForWriting().cachelimit = value;
  }

  public final void setCachelimit(int value)
      throws AccessPoemException, ValidationPoemException {
    setCachelimit(new Integer(value));
  }

  public final Field getCachelimitField() throws AccessPoemException {
    return getTableInfoTable().getCachelimitColumn().asField(this);
  }

  public Boolean getSeqcached()
      throws AccessPoemException {
    return dataForReading().seqcached;
  }

  public void setSeqcached(Boolean value)
      throws AccessPoemException, ValidationPoemException {
    getTableInfoTable().getSeqcachedColumn().getType().assertValidValue(value);
    dataForWriting().seqcached = value;
  }

  public final void setSeqcached(boolean value)
      throws AccessPoemException, ValidationPoemException {
    setSeqcached(value ? Boolean.TRUE : Boolean.FALSE);
  }

  public final Field getSeqcachedField() throws AccessPoemException {
    return getTableInfoTable().getSeqcachedColumn().asField(this);
  }
}
