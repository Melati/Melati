// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.doc.example;

import java.util.*;
import java.sql.Date;
import java.sql.Timestamp;
import org.melati.util.*;
import org.melati.poem.*;

public class OrderTableBase extends Table {

  private Column col_id = null;
  private Column col_buyer = null;
  private Column col_product = null;
  private Column col_urgent = null;

  public OrderTableBase(
      Database database, String name,
      DefinitionSource definitionSource) throws PoemException {
    super(database, name, definitionSource);
  }

  public OrderTableBase(
      Database database, String name) throws PoemException {
    this(database, name, DefinitionSource.dsd);
  }

  public ExampleDatabase getExampleDatabase() {
    return (ExampleDatabase)getDatabase();  }

  protected void init() throws PoemException {
    super.init();
    defineColumn(col_id =
        new Column(this, "id", TroidPoemType.it, DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Order)g).getId();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Order)g).setId((Integer)cooked);
          }

          public Field asField(Persistent g) {
            return ((Order)g).getIdField();
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected int defaultDisplayOrder() {
            return 0;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Order)g).getId_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Order)g).setId_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Order)g).getId();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Order)g).setId((Integer)raw);
          }
        });

    defineColumn(col_buyer =
        new Column(this, "buyer", new ReferencePoemType(((ExampleDatabase)getDatabase()).getBuyerTable(), false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Order)g).getBuyer();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Order)g).setBuyer((Buyer)cooked);
          }

          public Field asField(Persistent g) {
            return ((Order)g).getBuyerField();
          }

          protected int defaultDisplayOrder() {
            return 1;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Order)g).getBuyer_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Order)g).setBuyer_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Order)g).getBuyerTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Order)g).setBuyerTroid((Integer)raw);
          }
        });

    defineColumn(col_product =
        new Column(this, "product", new ReferencePoemType(((ExampleDatabase)getDatabase()).getProductTable(), false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Order)g).getProduct();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Order)g).setProduct((Product)cooked);
          }

          public Field asField(Persistent g) {
            return ((Order)g).getProductField();
          }

          protected int defaultDisplayOrder() {
            return 2;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Order)g).getProduct_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Order)g).setProduct_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Order)g).getProductTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Order)g).setProductTroid((Integer)raw);
          }
        });

    defineColumn(col_urgent =
        new Column(this, "urgent", new BooleanPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Order)g).getUrgent();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Order)g).setUrgent((Boolean)cooked);
          }

          public Field asField(Persistent g) {
            return ((Order)g).getUrgentField();
          }

          protected int defaultDisplayOrder() {
            return 3;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Order)g).getUrgent_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Order)g).setUrgent_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Order)g).getUrgent();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Order)g).setUrgent((Boolean)raw);
          }
        });
  }

  public final Column getIdColumn() {
    return col_id;
  }

  public final Column getBuyerColumn() {
    return col_buyer;
  }

  public final Column getProductColumn() {
    return col_product;
  }

  public final Column getUrgentColumn() {
    return col_urgent;
  }

  public Order getOrderObject(Integer troid) {
    return (Order)getObject(troid);
  }

  public Order getOrderObject(int troid) {
    return (Order)getObject(troid);
  }

  protected Persistent _newPersistent() {
    return new Order();
  }
  protected String defaultDescription() {
    return "An order";
  }

  protected int defaultDisplayOrder() {
    return 3;
  }
}
