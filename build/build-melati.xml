<?xml version="1.0"?>

<!-- Ant Build file for Melati -->
<!-- cvs="$Id Exp $" -->

<project name="melati" default="main" basedir="." >

    <target name="init">
        <property name="Name" value="melati"/>
        <property name="version" value="0.55.2"/>
        <property name="project" value="melati"/>
        <property name="compiler" value="${JAVAC}"/>
        <property name="this.root"      value="../../.."/>
        <property name="build.root"     value="${this.root}/../build"/>
        <property name="compiled.root"  value="${build.root}/compiled"/>
        <property name="built.root"     value="${build.root}/built"/>
        <property name="built.dir"      value="${built.root}/${project}_${version}"/>
        <property name="built.lib"      value="${built.dir}/lib"/>
        <property name="built.src"      value="${built.dir}/src"/>
        <property name="doc.root"       value="${build.root}/doc"/>
        <property name="doc.dir"        value="${doc.root}/${project}_${version}/doc"/>
        <property name="packaged.root"  value="${build.root}/packaged/"/>
        <property name="year" value="2000"/>
        <property name="ant.home" value="."/>
        <property name="debug" value="on"/>
        <property name="optimize" value="off"/>
        <property name="deprecation" value="on"/>
        
        <property name="poemODMGDSD" value="${build.root}/org/melati/poem/odmg/playing/Playing.dsd"/>
        
        <filter token="year" value="${year}"/>
        <filter token="version" value="${version}"/>
        <filter token="date" value="${TODAY}"/>        
    </target>

    <!-- =================================================================== -->
    <!-- Compiles the source directory                                       -->
    <!-- =================================================================== -->
    <target name="compile" depends="init">
      <mkdir dir="${compiled.root}"/>
  
      <javac srcdir="${this.root}"
            destdir="${compiled.root}"
            includes="**/*.java"
            excludes="**/playing/**/*.java,**/jtemplater/**/*.java"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Coppies the other files                                             -->
    <!-- =================================================================== -->
    <target name="sources" depends="init">
        <copy todir="${built.src}">
          <fileset dir="${this.root}">
            <patternset id="sources" >
              <include name="**/*.wm"/>
              <include name="**/*.js"/>
              <include name="**/*.html"/>
              <include name="**/*.gif"/>
              <exclude name="**/doc/example/**/*.wm"/>
              <exclude name="**/playing/**/*.wm"/>
              <exclude name="**/README.html"/>
              <exclude name="**/RELEASE-NOTES.html"/>
            </patternset>
          </fileset>
        </copy>

        <copy todir="${built.dir}">
          <fileset dir="${this.root}/org/melati">
            <patternset id="sources" >
              <include name="*.txt"/>
              <include name="*.html"/>
            </patternset>
          </fileset>
        </copy>

        <copy todir="${built.src}">
          <fileset dir="${this.root}">
            <patternset id="sources" >
              <include name="**/*.properties.example"/>
            </patternset>
          </fileset>
          <mapper type="glob" from="*.properties.example" to="*.properties"/>
        </copy>

    </target>
  
    <!-- =================================================================== -->
    <!-- Compiles the source directory and creates a .jar file               -->
    <!-- =================================================================== -->
    <!-- don't include properties and wm files in jar -->
    <target name="jar" depends="compile">
        <mkdir dir="${built.lib}"/>
        <jar jarfile="${built.lib}/${project}.jar"
            basedir="${compiled.root}"
            includes="**/*.class"
        />
        <zip zipfile="${built.lib}/src.zip" 
            basedir="${this.root}" 
            includes="**/*.java"/>
        <zip zipfile="${built.lib}/example.zip" 
            basedir="${this.root}" 
            includes="org/melati/doc/example/contacts/**/*"
            excludes="org/melati/doc/example/contacts/**/CSV/*"/>
    </target>
    
    <!-- =================================================================== -->
    <!-- Runs the pre-processor to generate the poem support classes         -->
    <!-- =================================================================== -->
    <target name="preproODMGPlaying" depends="jar">
       <java classname="org.melati.poem.prepro.DSD"
             fork="yes"
             args="${poemODMGDSD}"
             jvmargs=""
       />
    </target>

    <!-- =================================================================== -->
    <!-- Compiles the source directory                                       -->
    <!-- =================================================================== -->
    <target name="compileODMGPlaying" depends="preproODMGPlaying">
        <javac srcdir="${build.root}"
            destdir="${build.dist.src}"
            includes="org/melati/poem/odmg/playing/**/*.java"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}"/>
    </target>
  
    <!-- =================================================================== -->
    <!-- Compiles the source directory and creates a .jar file               -->
    <!-- =================================================================== -->
    <target name="jarODMGPlaying" depends="compileODMGPlaying">
        <jar jarfile="${build.built}/${project}.ODMGPlaying.jar"
            basedir="${build.dist.src}"
            includes="**/*.class **/*.properties"
        />
    </target>
    
    <!-- =================================================================== -->
    <!-- Runs the pre-processor to generate the poem support classes         -->
    <!-- =================================================================== -->
    <target name="runODMGPlaying" depends="jarODMGPlaying">
       <java classname="org.melati.poem.odmg.playing.PlayingTest"
             fork="yes"
             args=""
             jvmargs=""
       />
    </target>

    <!-- =================================================================== -->
    <!-- Creates the API documentation                                       -->
    <!-- =================================================================== -->
    <target name="javadocs" depends="init">
      <mkdir dir="${doc.dir}"/>
        <javadoc
            sourcepath="${this.root}"
            sourcefiles=""
            packagenames="org.*"
            destdir="${doc.dir}"
            author="true"
            private="true"
            version="true"
            use="true"
            windowtitle="${Name} ${version} API"
            doctitle="${Name} ${version} API"
            bottom="Copyright &#169; ${year} &lt;i&gt;melati&lt;/i&gt;. All Rights Reserved."
        />
    </target>
    
    <!-- =================================================================== -->
    <!-- Package as .zip and .tgz                                            -->
    <!-- =================================================================== -->
    <target name="package" depends="jar,javadocs,sources">
        <mkdir dir="${packaged.root}"/>
        <zip zipfile="${packaged.root}/${Name}_${version}.zip" basedir="${built.root}"/>
        <tar tarfile="${packaged.root}/${Name}_${version}.tar" basedir="${built.root}"/>
        <gzip zipfile="${packaged.root}/${Name}_${version}.tar.gz" src="${packaged.root}/${Name}_${version}.tar"/>
        <zip zipfile="${packaged.root}/${Name}_${version}_doc.zip" basedir="${doc.dir}"/>
        <tar tarfile="${packaged.root}/${Name}_${version}_doc.tar" basedir="${doc.dir}"/>
        <gzip zipfile="${packaged.root}/${Name}_${version}_doc.tar.gz" src="${packaged.root}/${Name}_${version}_doc.tar"/>
    </target>
    
    
    <!-- =================================================================== -->
    <!-- Cleans up the build directory                                       -->
    <!-- =================================================================== -->
    <target name="clean" depends="init">
        <delete dir="${build.root}"/>
    </target>
</project>
