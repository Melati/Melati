// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.doc.example;

import org.melati.poem.*;

public class ProductBase extends Persistent {

  public ProductTable getProductTable() {
    return (ProductTable)getTable();
  }

  Integer id;
  String name;
  Double price;

  public Integer getId_unsafe() {
    return id;
  }

  public void setId_unsafe(Integer value) {
    id = value;
  }

  public Integer getId()
      throws AccessPoemException {
    readLock();
    return getId_unsafe();
  }

  public void setId(Integer value)
      throws AccessPoemException, ValidationPoemException {
    getProductTable().getIdColumn().getType().assertValidValue(value);
    writeLock();
    setId_unsafe(value);
  }

  public final void setId(int value)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(value));
  }

  public final Field getIdField() throws AccessPoemException {
    return getProductTable().getIdColumn().asField(this);
  }

  public String getName_unsafe() {
    return name;
  }

  public void setName_unsafe(String value) {
    name = value;
  }

  public String getName()
      throws AccessPoemException {
    readLock();
    return getName_unsafe();
  }

  public void setName(String value)
      throws AccessPoemException, ValidationPoemException {
    getProductTable().getNameColumn().getType().assertValidValue(value);
    writeLock();
    setName_unsafe(value);
  }

  public final Field getNameField() throws AccessPoemException {
    return getProductTable().getNameColumn().asField(this);
  }

  public Double getPrice_unsafe() {
    return price;
  }

  public void setPrice_unsafe(Double value) {
    price = value;
  }

  public Double getPrice()
      throws AccessPoemException {
    readLock();
    return getPrice_unsafe();
  }

  public void setPrice(Double value)
      throws AccessPoemException, ValidationPoemException {
    getProductTable().getPriceColumn().getType().assertValidValue(value);
    writeLock();
    setPrice_unsafe(value);
  }

  public final void setPrice(double value)
      throws AccessPoemException, ValidationPoemException {
    setPrice(new Double(value));
  }

  public final Field getPriceField() throws AccessPoemException {
    return getProductTable().getPriceColumn().asField(this);
  }
}
