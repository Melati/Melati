// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.poem.odmg.playing.generated;

import org.melati.poem.odmg.playing.*;
import java.util.*;
import java.sql.Date;
import java.sql.Timestamp;
import org.melati.poem.*;

public abstract class ChildBase extends Persistent {

  public PlayingDatabase getPlayingDatabase() {
    return (PlayingDatabase)getDatabase();
  }

  public ChildTable getChildTable() {
    return (ChildTable)getTable();
  }

  private ChildTable _getChildTable() {
    return (ChildTable)getTable();
  }

  protected Integer id;
  protected String name;
  protected Integer parent;

  public Integer getId_unsafe() {
    return id;
  }

  public void setId_unsafe(Integer cooked) {
    id = cooked;
  }

  public Integer getId()
      throws AccessPoemException {
    readLock();
    return getId_unsafe();
  }

  public void setId(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getChildTable().getIdColumn().getType().assertValidCooked(cooked);
    writeLock();
    setId_unsafe(cooked);
  }

  public final void setId(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(cooked));
  }

  public Field getIdField() throws AccessPoemException {
    Column c = _getChildTable().getIdColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getName_unsafe() {
    return name;
  }

  public void setName_unsafe(String cooked) {
    name = cooked;
  }

  public String getName()
      throws AccessPoemException {
    readLock();
    return getName_unsafe();
  }

  public void setName(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getChildTable().getNameColumn().getType().assertValidCooked(cooked);
    writeLock();
    setName_unsafe(cooked);
  }

  public Field getNameField() throws AccessPoemException {
    Column c = _getChildTable().getNameColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getParent_unsafe() {
    return parent;
  }

  public void setParent_unsafe(Integer cooked) {
    parent = cooked;
  }

  public Integer getParentTroid()
      throws AccessPoemException {
    readLock();
    return getParent_unsafe();
  }

  public void setParentTroid(Integer raw)
      throws AccessPoemException {
    _getChildTable().getParentColumn().getType().assertValidRaw(raw);
    writeLock();
    setParent_unsafe(raw);
  }

  public Parent getParent()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getParentTroid();
    return troid == null ? null :
        getPlayingDatabase().getParentTable().getParentObject(troid);
  }

  public void setParent(Parent cooked)
      throws AccessPoemException {
    setParentTroid(cooked == null ? null : cooked.troid());
  }

  public Field getParentField() throws AccessPoemException {
    Column c = _getChildTable().getParentColumn();
    return new Field(c.getRaw(this), c);
  }
}
