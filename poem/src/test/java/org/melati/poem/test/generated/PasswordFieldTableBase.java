// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.poem.test.generated;


import org.melati.poem.AccessPoemException;
import org.melati.poem.Column;
import org.melati.poem.Database;
import org.melati.poem.DefinitionSource;
import org.melati.poem.DisplayLevel;
import org.melati.poem.Field;
import org.melati.poem.JdbcPersistent;
import org.melati.poem.PasswordPoemType;
import org.melati.poem.Persistent;
import org.melati.poem.PoemException;
import org.melati.poem.Searchability;
import org.melati.poem.StringPoemType;
import org.melati.poem.TroidPoemType;
import org.melati.poem.ValidationPoemException;
import org.melati.poem.test.EverythingDatabaseTables;
import org.melati.poem.test.EverythingTable;
import org.melati.poem.test.PasswordField;


/**
 * Melati POEM generated base class for <code>Table</code> <code>PasswordField</code>.
 *
 * See org.melati.poem.prepro.TableDef#generateTableBaseJava 
 */

public class PasswordFieldTableBase<T extends PasswordField> extends EverythingTable<T> {

  private Column<Integer> col_id = null;
  private Column<String> col_passwordfield = null;

 /**
  * Constructor. 
  * 
  * See org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @param database          the POEM database we are using
  * @param name              the name of this <code>Table</code>
  * @param definitionSource  which definition is being used
  * @throws PoemException    if anything goes wrong
  */

  public PasswordFieldTableBase(
      Database database, String name,
      DefinitionSource definitionSource) throws PoemException {
    super(database, name, definitionSource);
  }


 /**
  * Get the database tables.
  *
  * See org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @return the database tables
  */
  public EverythingDatabaseTables getEverythingDatabaseTables() {
    return (EverythingDatabaseTables)getDatabase();
  }


 /**
  * Initialise this table by defining its columns.
  *
  * See org.melati.poem.prepro.TableDef#generateTableBaseJava 
  */
  public void init() throws PoemException {
    super.init();
    defineColumn(col_id =
        new Column<Integer>(this, "id",
                   new TroidPoemType(),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((PasswordField)g).getId();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((PasswordField)g).setId((Integer)cooked);
          }

          public Field<Integer> asField(Persistent g) {
            return ((PasswordField)g).getIdField();
          }

          public boolean defaultUserEditable() {
            return false;
          }

          public boolean defaultUserCreateable() {
            return false;
          }

          public DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.summary;
          }

          public Searchability defaultSearchability() {
            return Searchability.yes;
          }

          public String defaultDisplayName() {
            return "Id";
          }

          public int defaultDisplayOrder() {
            return 0;
          }

          public boolean defaultIndexed() {
            return true;
          }

          public boolean defaultUnique() {
            return true;
          }

          public int defaultWidth() {
            return 20;
          }

          public int defaultHeight() {
            return 1;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((PasswordField)g).getId_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((PasswordField)g).setId_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((PasswordField)g).getId();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((PasswordField)g).setId((Integer)raw);
          }
        });

    defineColumn(col_passwordfield =
        new Column<String>(this, "passwordfield",
                   new PasswordPoemType(true, 23),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((PasswordField)g).getPasswordfield();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((PasswordField)g).setPasswordfield((String)cooked);
          }

          public Field<String> asField(Persistent g) {
            return ((PasswordField)g).getPasswordfieldField();
          }

          public DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.summary;
          }

          public Searchability defaultSearchability() {
            return Searchability.yes;
          }

          public String defaultDisplayName() {
            return "Password Field";
          }

          public int defaultDisplayOrder() {
            return 3;
          }

          public int defaultWidth() {
            return 20;
          }

          public int defaultHeight() {
            return 3;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((PasswordField)g).getPasswordfield_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((PasswordField)g).setPasswordfield_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((PasswordField)g).getPasswordfield();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((PasswordField)g).setPasswordfield((String)raw);
          }
        });
  }


 /**
  * Retrieves the <code>Id</code> <code>Column</code> for this 
  * <code>PasswordField</code> <code>Table</code>.
  * 
  * see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the id <code>Column</code>
  */
  public final Column<Integer> getIdColumn() {
    return col_id;
  }


 /**
  * Retrieves the <code>Passwordfield</code> <code>Column</code> for this 
  * <code>PasswordField</code> <code>Table</code>.
  * 
  * see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the passwordfield <code>Column</code>
  */
  public final Column<String> getPasswordfieldColumn() {
    return col_passwordfield;
  }


 /**
  * Retrieve the <code>PasswordField</code> as a <code>PasswordField</code>.
  *
  * See org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @param troid a Table Row Object ID
  * @return the <code>Persistent</code> identified by the <code>troid</code>
  */
  public PasswordField getPasswordFieldObject(Integer troid) {
    return (PasswordField)getObject(troid);
  }


 /**
  * Retrieve the <code>PasswordField</code> 
  * as a <code>PasswordField</code>.
  *
  * See org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @param troid a Table Row Object ID
  * @return the <code>Persistent</code> identified   */
  public PasswordField getPasswordFieldObject(int troid) {
    return (PasswordField)getObject(troid);
  }

  protected JdbcPersistent _newPersistent() {
    return new PasswordField();
  }
  public String defaultDisplayName() {
    return "Password Field";
  }

  public String defaultDescription() {
    return "A table with only a password field in it";
  }

  public Integer defaultCacheLimit() {
    return new Integer(100);
  }

  public String defaultCategory() {
    return "Normal";
  }

  public int defaultDisplayOrder() {
    return 15;
  }
}

