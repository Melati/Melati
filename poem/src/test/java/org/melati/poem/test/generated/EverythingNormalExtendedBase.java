// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.poem.test.generated;


import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;
import org.melati.poem.AccessPoemException;
import org.melati.poem.Column;
import org.melati.poem.Field;
import org.melati.poem.ValidationPoemException;
import org.melati.poem.test.EverythingNormal;
import org.melati.poem.test.EverythingNormalExtendedTable;
import org.melati.poem.test.TestDatabaseTables;


/**
 * Melati POEM generated base class for persistent EverythingNormalExtended.
 * Field summary for SQL table everythingnormalextended:
 *   binaryfield2
 *   stringfield2
 *   passwordfield2
 *   booleanfield2
 *   datefield2
 *   doublefield2
 *   integerfield2
 *   longfield2
 *   bigdecimalfield2
 *   timestampfield2
 *
 */
public abstract class EverythingNormalExtendedBase extends EverythingNormal {

  public TestDatabaseTables getTestDatabaseTables() {
    return (TestDatabaseTables)getDatabase();
  }

  public EverythingNormalExtendedTable getEverythingNormalExtendedTable() {
    return (EverythingNormalExtendedTable)getTable();
  }

  private EverythingNormalExtendedTable _getEverythingNormalExtendedTable() {
    return (EverythingNormalExtendedTable)getTable();
  }

  protected byte[] binaryfield2;
  protected String stringfield2;
  protected String passwordfield2;
  protected Boolean booleanfield2;
  protected Date datefield2;
  protected Double doublefield2;
  protected Integer integerfield2;
  protected Long longfield2;
  protected BigDecimal bigdecimalfield2;
  protected Timestamp timestampfield2;

  public byte[] getBinaryfield2_unsafe() {
    return binaryfield2;
  }

  public void setBinaryfield2_unsafe(byte[] cooked) {
    binaryfield2 = cooked;
  }

  public byte[] getBinaryfield2()
      throws AccessPoemException {
    readLock();
    return getBinaryfield2_unsafe();
  }

  public void setBinaryfield2(byte[] cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalExtendedTable().getBinaryfield2Column().getType().assertValidCooked(cooked);
    writeLock();
    setBinaryfield2_unsafe(cooked);
  }

  public Field getBinaryfield2Field() throws AccessPoemException {
    Column c = _getEverythingNormalExtendedTable().getBinaryfield2Column();
    return new Field(c.getRaw(this), c);
  }

  public String getStringfield2_unsafe() {
    return stringfield2;
  }

  public void setStringfield2_unsafe(String cooked) {
    stringfield2 = cooked;
  }

  public String getStringfield2()
      throws AccessPoemException {
    readLock();
    return getStringfield2_unsafe();
  }

  public void setStringfield2(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalExtendedTable().getStringfield2Column().getType().assertValidCooked(cooked);
    writeLock();
    setStringfield2_unsafe(cooked);
  }

  public Field getStringfield2Field() throws AccessPoemException {
    Column c = _getEverythingNormalExtendedTable().getStringfield2Column();
    return new Field(c.getRaw(this), c);
  }

  public String getPasswordfield2_unsafe() {
    return passwordfield2;
  }

  public void setPasswordfield2_unsafe(String cooked) {
    passwordfield2 = cooked;
  }

  public String getPasswordfield2()
      throws AccessPoemException {
    readLock();
    return getPasswordfield2_unsafe();
  }

  public void setPasswordfield2(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalExtendedTable().getPasswordfield2Column().getType().assertValidCooked(cooked);
    writeLock();
    setPasswordfield2_unsafe(cooked);
  }

  public Field getPasswordfield2Field() throws AccessPoemException {
    Column c = _getEverythingNormalExtendedTable().getPasswordfield2Column();
    return new Field(c.getRaw(this), c);
  }

  public Boolean getBooleanfield2_unsafe() {
    return booleanfield2;
  }

  public void setBooleanfield2_unsafe(Boolean cooked) {
    booleanfield2 = cooked;
  }

  public Boolean getBooleanfield2()
      throws AccessPoemException {
    readLock();
    return getBooleanfield2_unsafe();
  }

  public void setBooleanfield2(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalExtendedTable().getBooleanfield2Column().getType().assertValidCooked(cooked);
    writeLock();
    setBooleanfield2_unsafe(cooked);
  }

  public final void setBooleanfield2(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setBooleanfield2(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getBooleanfield2Field() throws AccessPoemException {
    Column c = _getEverythingNormalExtendedTable().getBooleanfield2Column();
    return new Field(c.getRaw(this), c);
  }

  public Date getDatefield2_unsafe() {
    return datefield2;
  }

  public void setDatefield2_unsafe(Date cooked) {
    datefield2 = cooked;
  }

  public Date getDatefield2()
      throws AccessPoemException {
    readLock();
    return getDatefield2_unsafe();
  }

  public void setDatefield2(Date cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalExtendedTable().getDatefield2Column().getType().assertValidCooked(cooked);
    writeLock();
    setDatefield2_unsafe(cooked);
  }

  public Field getDatefield2Field() throws AccessPoemException {
    Column c = _getEverythingNormalExtendedTable().getDatefield2Column();
    return new Field(c.getRaw(this), c);
  }

  public Double getDoublefield2_unsafe() {
    return doublefield2;
  }

  public void setDoublefield2_unsafe(Double cooked) {
    doublefield2 = cooked;
  }

  public Double getDoublefield2()
      throws AccessPoemException {
    readLock();
    return getDoublefield2_unsafe();
  }

  public void setDoublefield2(Double cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalExtendedTable().getDoublefield2Column().getType().assertValidCooked(cooked);
    writeLock();
    setDoublefield2_unsafe(cooked);
  }

  public final void setDoublefield2(double cooked)
      throws AccessPoemException, ValidationPoemException {
    setDoublefield2(new Double(cooked));
  }

  public Field getDoublefield2Field() throws AccessPoemException {
    Column c = _getEverythingNormalExtendedTable().getDoublefield2Column();
    return new Field(c.getRaw(this), c);
  }

  public Integer getIntegerfield2_unsafe() {
    return integerfield2;
  }

  public void setIntegerfield2_unsafe(Integer cooked) {
    integerfield2 = cooked;
  }

  public Integer getIntegerfield2()
      throws AccessPoemException {
    readLock();
    return getIntegerfield2_unsafe();
  }

  public void setIntegerfield2(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalExtendedTable().getIntegerfield2Column().getType().assertValidCooked(cooked);
    writeLock();
    setIntegerfield2_unsafe(cooked);
  }

  public final void setIntegerfield2(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setIntegerfield2(new Integer(cooked));
  }

  public Field getIntegerfield2Field() throws AccessPoemException {
    Column c = _getEverythingNormalExtendedTable().getIntegerfield2Column();
    return new Field(c.getRaw(this), c);
  }

  public Long getLongfield2_unsafe() {
    return longfield2;
  }

  public void setLongfield2_unsafe(Long cooked) {
    longfield2 = cooked;
  }

  public Long getLongfield2()
      throws AccessPoemException {
    readLock();
    return getLongfield2_unsafe();
  }

  public void setLongfield2(Long cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalExtendedTable().getLongfield2Column().getType().assertValidCooked(cooked);
    writeLock();
    setLongfield2_unsafe(cooked);
  }

  public final void setLongfield2(long cooked)
      throws AccessPoemException, ValidationPoemException {
    setLongfield2(new Long(cooked));
  }

  public Field getLongfield2Field() throws AccessPoemException {
    Column c = _getEverythingNormalExtendedTable().getLongfield2Column();
    return new Field(c.getRaw(this), c);
  }

  public BigDecimal getBigdecimalfield2_unsafe() {
    return bigdecimalfield2;
  }

  public void setBigdecimalfield2_unsafe(BigDecimal cooked) {
    bigdecimalfield2 = cooked;
  }

  public BigDecimal getBigdecimalfield2()
      throws AccessPoemException {
    readLock();
    return getBigdecimalfield2_unsafe();
  }

  public void setBigdecimalfield2(BigDecimal cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalExtendedTable().getBigdecimalfield2Column().getType().assertValidCooked(cooked);
    writeLock();
    setBigdecimalfield2_unsafe(cooked);
  }

  public Field getBigdecimalfield2Field() throws AccessPoemException {
    Column c = _getEverythingNormalExtendedTable().getBigdecimalfield2Column();
    return new Field(c.getRaw(this), c);
  }

  public Timestamp getTimestampfield2_unsafe() {
    return timestampfield2;
  }

  public void setTimestampfield2_unsafe(Timestamp cooked) {
    timestampfield2 = cooked;
  }

  public Timestamp getTimestampfield2()
      throws AccessPoemException {
    readLock();
    return getTimestampfield2_unsafe();
  }

  public void setTimestampfield2(Timestamp cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalExtendedTable().getTimestampfield2Column().getType().assertValidCooked(cooked);
    writeLock();
    setTimestampfield2_unsafe(cooked);
  }

  public Field getTimestampfield2Field() throws AccessPoemException {
    Column c = _getEverythingNormalExtendedTable().getTimestampfield2Column();
    return new Field(c.getRaw(this), c);
  }
}
