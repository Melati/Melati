// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.poem.test.generated;


import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;
import org.melati.poem.AccessPoemException;
import org.melati.poem.Column;
import org.melati.poem.Field;
import org.melati.poem.Persistent;
import org.melati.poem.ValidationPoemException;
import org.melati.poem.test.EverythingNormalTable;
import org.melati.poem.test.TestDatabaseTables;


/**
 * Melati POEM generated base class for persistent EverythingNormal.
 * Field summary for SQL table everythingnormal:
 *   id
 *   binaryfield
 *   stringfield
 *   passwordfield
 *   booleanfield
 *   datefield
 *   doublefield
 *   integerfield
 *   longfield
 *   bigdecimalfield
 *   timestampfield
 *
 */
public abstract class EverythingNormalBase extends Persistent {

  public TestDatabaseTables getTestDatabaseTables() {
    return (TestDatabaseTables)getDatabase();
  }

  public EverythingNormalTable getEverythingNormalTable() {
    return (EverythingNormalTable)getTable();
  }

  private EverythingNormalTable _getEverythingNormalTable() {
    return (EverythingNormalTable)getTable();
  }

  protected Integer id;
  protected byte[] binaryfield;
  protected String stringfield;
  protected String passwordfield;
  protected Boolean booleanfield;
  protected Date datefield;
  protected Double doublefield;
  protected Integer integerfield;
  protected Long longfield;
  protected BigDecimal bigdecimalfield;
  protected Timestamp timestampfield;

  public Integer getId_unsafe() {
    return id;
  }

  public void setId_unsafe(Integer cooked) {
    id = cooked;
  }

  public Integer getId()
      throws AccessPoemException {
    readLock();
    return getId_unsafe();
  }

  public void setId(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalTable().getIdColumn().getType().assertValidCooked(cooked);
    writeLock();
    setId_unsafe(cooked);
  }

  public final void setId(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(cooked));
  }

  public Field getIdField() throws AccessPoemException {
    Column c = _getEverythingNormalTable().getIdColumn();
    return new Field(c.getRaw(this), c);
  }

  public byte[] getBinaryfield_unsafe() {
    return binaryfield;
  }

  public void setBinaryfield_unsafe(byte[] cooked) {
    binaryfield = cooked;
  }

  public byte[] getBinaryfield()
      throws AccessPoemException {
    readLock();
    return getBinaryfield_unsafe();
  }

  public void setBinaryfield(byte[] cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalTable().getBinaryfieldColumn().getType().assertValidCooked(cooked);
    writeLock();
    setBinaryfield_unsafe(cooked);
  }

  public Field getBinaryfieldField() throws AccessPoemException {
    Column c = _getEverythingNormalTable().getBinaryfieldColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getStringfield_unsafe() {
    return stringfield;
  }

  public void setStringfield_unsafe(String cooked) {
    stringfield = cooked;
  }

  public String getStringfield()
      throws AccessPoemException {
    readLock();
    return getStringfield_unsafe();
  }

  public void setStringfield(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalTable().getStringfieldColumn().getType().assertValidCooked(cooked);
    writeLock();
    setStringfield_unsafe(cooked);
  }

  public Field getStringfieldField() throws AccessPoemException {
    Column c = _getEverythingNormalTable().getStringfieldColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getPasswordfield_unsafe() {
    return passwordfield;
  }

  public void setPasswordfield_unsafe(String cooked) {
    passwordfield = cooked;
  }

  public String getPasswordfield()
      throws AccessPoemException {
    readLock();
    return getPasswordfield_unsafe();
  }

  public void setPasswordfield(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalTable().getPasswordfieldColumn().getType().assertValidCooked(cooked);
    writeLock();
    setPasswordfield_unsafe(cooked);
  }

  public Field getPasswordfieldField() throws AccessPoemException {
    Column c = _getEverythingNormalTable().getPasswordfieldColumn();
    return new Field(c.getRaw(this), c);
  }

  public Boolean getBooleanfield_unsafe() {
    return booleanfield;
  }

  public void setBooleanfield_unsafe(Boolean cooked) {
    booleanfield = cooked;
  }

  public Boolean getBooleanfield()
      throws AccessPoemException {
    readLock();
    return getBooleanfield_unsafe();
  }

  public void setBooleanfield(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalTable().getBooleanfieldColumn().getType().assertValidCooked(cooked);
    writeLock();
    setBooleanfield_unsafe(cooked);
  }

  public final void setBooleanfield(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setBooleanfield(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getBooleanfieldField() throws AccessPoemException {
    Column c = _getEverythingNormalTable().getBooleanfieldColumn();
    return new Field(c.getRaw(this), c);
  }

  public Date getDatefield_unsafe() {
    return datefield;
  }

  public void setDatefield_unsafe(Date cooked) {
    datefield = cooked;
  }

  public Date getDatefield()
      throws AccessPoemException {
    readLock();
    return getDatefield_unsafe();
  }

  public void setDatefield(Date cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalTable().getDatefieldColumn().getType().assertValidCooked(cooked);
    writeLock();
    setDatefield_unsafe(cooked);
  }

  public Field getDatefieldField() throws AccessPoemException {
    Column c = _getEverythingNormalTable().getDatefieldColumn();
    return new Field(c.getRaw(this), c);
  }

  public Double getDoublefield_unsafe() {
    return doublefield;
  }

  public void setDoublefield_unsafe(Double cooked) {
    doublefield = cooked;
  }

  public Double getDoublefield()
      throws AccessPoemException {
    readLock();
    return getDoublefield_unsafe();
  }

  public void setDoublefield(Double cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalTable().getDoublefieldColumn().getType().assertValidCooked(cooked);
    writeLock();
    setDoublefield_unsafe(cooked);
  }

  public final void setDoublefield(double cooked)
      throws AccessPoemException, ValidationPoemException {
    setDoublefield(new Double(cooked));
  }

  public Field getDoublefieldField() throws AccessPoemException {
    Column c = _getEverythingNormalTable().getDoublefieldColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getIntegerfield_unsafe() {
    return integerfield;
  }

  public void setIntegerfield_unsafe(Integer cooked) {
    integerfield = cooked;
  }

  public Integer getIntegerfield()
      throws AccessPoemException {
    readLock();
    return getIntegerfield_unsafe();
  }

  public void setIntegerfield(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalTable().getIntegerfieldColumn().getType().assertValidCooked(cooked);
    writeLock();
    setIntegerfield_unsafe(cooked);
  }

  public final void setIntegerfield(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setIntegerfield(new Integer(cooked));
  }

  public Field getIntegerfieldField() throws AccessPoemException {
    Column c = _getEverythingNormalTable().getIntegerfieldColumn();
    return new Field(c.getRaw(this), c);
  }

  public Long getLongfield_unsafe() {
    return longfield;
  }

  public void setLongfield_unsafe(Long cooked) {
    longfield = cooked;
  }

  public Long getLongfield()
      throws AccessPoemException {
    readLock();
    return getLongfield_unsafe();
  }

  public void setLongfield(Long cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalTable().getLongfieldColumn().getType().assertValidCooked(cooked);
    writeLock();
    setLongfield_unsafe(cooked);
  }

  public final void setLongfield(long cooked)
      throws AccessPoemException, ValidationPoemException {
    setLongfield(new Long(cooked));
  }

  public Field getLongfieldField() throws AccessPoemException {
    Column c = _getEverythingNormalTable().getLongfieldColumn();
    return new Field(c.getRaw(this), c);
  }

  public BigDecimal getBigdecimalfield_unsafe() {
    return bigdecimalfield;
  }

  public void setBigdecimalfield_unsafe(BigDecimal cooked) {
    bigdecimalfield = cooked;
  }

  public BigDecimal getBigdecimalfield()
      throws AccessPoemException {
    readLock();
    return getBigdecimalfield_unsafe();
  }

  public void setBigdecimalfield(BigDecimal cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalTable().getBigdecimalfieldColumn().getType().assertValidCooked(cooked);
    writeLock();
    setBigdecimalfield_unsafe(cooked);
  }

  public Field getBigdecimalfieldField() throws AccessPoemException {
    Column c = _getEverythingNormalTable().getBigdecimalfieldColumn();
    return new Field(c.getRaw(this), c);
  }

  public Timestamp getTimestampfield_unsafe() {
    return timestampfield;
  }

  public void setTimestampfield_unsafe(Timestamp cooked) {
    timestampfield = cooked;
  }

  public Timestamp getTimestampfield()
      throws AccessPoemException {
    readLock();
    return getTimestampfield_unsafe();
  }

  public void setTimestampfield(Timestamp cooked)
      throws AccessPoemException, ValidationPoemException {
    _getEverythingNormalTable().getTimestampfieldColumn().getType().assertValidCooked(cooked);
    writeLock();
    setTimestampfield_unsafe(cooked);
  }

  public Field getTimestampfieldField() throws AccessPoemException {
    Column c = _getEverythingNormalTable().getTimestampfieldColumn();
    return new Field(c.getRaw(this), c);
  }
}
