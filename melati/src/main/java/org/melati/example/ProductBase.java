// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.doc.example;

import java.util.*;
import java.sql.Date;
import java.sql.Timestamp;
import org.melati.util.*;
import org.melati.poem.*;

public class ProductBase extends Persistent {

  public ExampleDatabase getExampleDatabase() {
    return (ExampleDatabase)getDatabase();
  }

  public ProductTable getProductTable() {
    return (ProductTable)getTable();
  }

  private ProductTable _getProductTable() {
    return (ProductTable)getTable();
  }

  Integer id;
  String name;
  Double price;

  public Integer getId_unsafe() {
    return id;
  }

  public void setId_unsafe(Integer cooked) {
    id = cooked;
  }

  public Integer getId()
      throws AccessPoemException {
    readLock();
    return getId_unsafe();
  }

  public void setId(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getProductTable().getIdColumn().getType().assertValidCooked(cooked);
    writeLock();
    setId_unsafe(cooked);
  }

  public final void setId(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(cooked));
  }

  public Field getIdField() throws AccessPoemException {
    return Field.of(this, _getProductTable().getIdColumn());
  }

  public String getName_unsafe() {
    return name;
  }

  public void setName_unsafe(String cooked) {
    name = cooked;
  }

  public String getName()
      throws AccessPoemException {
    readLock();
    return getName_unsafe();
  }

  public void setName(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getProductTable().getNameColumn().getType().assertValidCooked(cooked);
    writeLock();
    setName_unsafe(cooked);
  }

  public Field getNameField() throws AccessPoemException {
    return Field.of(this, _getProductTable().getNameColumn());
  }

  public Double getPrice_unsafe() {
    return price;
  }

  public void setPrice_unsafe(Double cooked) {
    price = cooked;
  }

  public Double getPrice()
      throws AccessPoemException {
    readLock();
    return getPrice_unsafe();
  }

  public void setPrice(Double cooked)
      throws AccessPoemException, ValidationPoemException {
    _getProductTable().getPriceColumn().getType().assertValidCooked(cooked);
    writeLock();
    setPrice_unsafe(cooked);
  }

  public final void setPrice(double cooked)
      throws AccessPoemException, ValidationPoemException {
    setPrice(new Double(cooked));
  }

  public Field getPriceField() throws AccessPoemException {
    return Field.of(this, _getProductTable().getPriceColumn());
  }
}
