// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.melati.poem.generated;


import org.melati.poem.Column;
import org.melati.poem.Field;
import org.melati.poem.Persistent;
import org.melati.poem.AccessPoemException;
import org.melati.poem.ValidationPoemException;

import org.melati.poem.PoemTypeFactory;

import org.melati.poem.ValueInfoTable;
import org.melati.poem.PoemDatabaseTables;

/**
 * Melati POEM generated base class for persistent ValueInfo.
 * Field summary for SQL table valueinfo:
 *   displayname
 *   description
 *   usereditable
 *   typefactory
 *   nullable
 *   size
 *   width
 *   height
 *   renderinfo
 *   rangelow_string
 *   rangelimit_string
 *
 */
public abstract class ValueInfoBase extends Persistent {

  public PoemDatabaseTables getPoemDatabaseTables() {
    return (PoemDatabaseTables)getDatabase();
  }

  public ValueInfoTable getValueInfoTable() {
    return (ValueInfoTable)getTable();
  }

  private ValueInfoTable _getValueInfoTable() {
    return (ValueInfoTable)getTable();
  }

  protected String displayname;
  protected String description;
  protected Boolean usereditable;
  protected Integer typefactory;
  protected Boolean nullable;
  protected Integer size;
  protected Integer width;
  protected Integer height;
  protected String renderinfo;
  protected String rangelow_string;
  protected String rangelimit_string;

  public String getDisplayname_unsafe() {
    return displayname;
  }

  public void setDisplayname_unsafe(String cooked) {
    displayname = cooked;
  }

  public String getDisplayname()
      throws AccessPoemException {
    readLock();
    return getDisplayname_unsafe();
  }

  public void setDisplayname(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getValueInfoTable().getDisplaynameColumn().getType().assertValidCooked(cooked);
    writeLock();
    setDisplayname_unsafe(cooked);
  }

  public Field getDisplaynameField() throws AccessPoemException {
    Column c = _getValueInfoTable().getDisplaynameColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getDescription_unsafe() {
    return description;
  }

  public void setDescription_unsafe(String cooked) {
    description = cooked;
  }

  public String getDescription()
      throws AccessPoemException {
    readLock();
    return getDescription_unsafe();
  }

  public void setDescription(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getValueInfoTable().getDescriptionColumn().getType().assertValidCooked(cooked);
    writeLock();
    setDescription_unsafe(cooked);
  }

  public Field getDescriptionField() throws AccessPoemException {
    Column c = _getValueInfoTable().getDescriptionColumn();
    return new Field(c.getRaw(this), c);
  }

  public Boolean getUsereditable_unsafe() {
    return usereditable;
  }

  public void setUsereditable_unsafe(Boolean cooked) {
    usereditable = cooked;
  }

  public Boolean getUsereditable()
      throws AccessPoemException {
    readLock();
    return getUsereditable_unsafe();
  }

  public void setUsereditable(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getValueInfoTable().getUsereditableColumn().getType().assertValidCooked(cooked);
    writeLock();
    setUsereditable_unsafe(cooked);
  }

  public final void setUsereditable(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setUsereditable(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getUsereditableField() throws AccessPoemException {
    Column c = _getValueInfoTable().getUsereditableColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getTypefactory_unsafe() {
    return typefactory;
  }

  public void setTypefactory_unsafe(Integer cooked) {
    typefactory = cooked;
  }

  public Integer getTypefactoryCode()
      throws AccessPoemException {
    readLock();
    return getTypefactory_unsafe();
  }

  public void setTypefactoryCode(Integer raw)
      throws AccessPoemException {
    getValueInfoTable().getTypefactoryColumn().getType().assertValidRaw(raw);
    writeLock();
    setTypefactory_unsafe(raw);
  }

  public PoemTypeFactory getTypefactory()
      throws AccessPoemException {
    Integer code = getTypefactoryCode();
    return code == null ? null :
        PoemTypeFactory.forCode(getDatabase(), code.intValue());
  }

  public void setTypefactory(PoemTypeFactory cooked)
      throws AccessPoemException {
    setTypefactoryCode(cooked == null ? null : cooked.getCode());
  }

  public Field getTypefactoryField() throws AccessPoemException {
    Column c = _getValueInfoTable().getTypefactoryColumn();
    return new Field(c.getRaw(this), c);
  }

  public Boolean getNullable_unsafe() {
    return nullable;
  }

  public void setNullable_unsafe(Boolean cooked) {
    nullable = cooked;
  }

  public Boolean getNullable()
      throws AccessPoemException {
    readLock();
    return getNullable_unsafe();
  }

  public void setNullable(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getValueInfoTable().getNullableColumn().getType().assertValidCooked(cooked);
    writeLock();
    setNullable_unsafe(cooked);
  }

  public final void setNullable(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setNullable(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getNullableField() throws AccessPoemException {
    Column c = _getValueInfoTable().getNullableColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getSize_unsafe() {
    return size;
  }

  public void setSize_unsafe(Integer cooked) {
    size = cooked;
  }

  public Integer getSize()
      throws AccessPoemException {
    readLock();
    return getSize_unsafe();
  }

  public void setSize(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getValueInfoTable().getSizeColumn().getType().assertValidCooked(cooked);
    writeLock();
    setSize_unsafe(cooked);
  }

  public final void setSize(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setSize(new Integer(cooked));
  }

  public Field getSizeField() throws AccessPoemException {
    Column c = _getValueInfoTable().getSizeColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getWidth_unsafe() {
    return width;
  }

  public void setWidth_unsafe(Integer cooked) {
    width = cooked;
  }

  public Integer getWidth()
      throws AccessPoemException {
    readLock();
    return getWidth_unsafe();
  }

  public void setWidth(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getValueInfoTable().getWidthColumn().getType().assertValidCooked(cooked);
    writeLock();
    setWidth_unsafe(cooked);
  }

  public final void setWidth(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setWidth(new Integer(cooked));
  }

  public Field getWidthField() throws AccessPoemException {
    Column c = _getValueInfoTable().getWidthColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getHeight_unsafe() {
    return height;
  }

  public void setHeight_unsafe(Integer cooked) {
    height = cooked;
  }

  public Integer getHeight()
      throws AccessPoemException {
    readLock();
    return getHeight_unsafe();
  }

  public void setHeight(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getValueInfoTable().getHeightColumn().getType().assertValidCooked(cooked);
    writeLock();
    setHeight_unsafe(cooked);
  }

  public final void setHeight(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setHeight(new Integer(cooked));
  }

  public Field getHeightField() throws AccessPoemException {
    Column c = _getValueInfoTable().getHeightColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getRenderinfo_unsafe() {
    return renderinfo;
  }

  public void setRenderinfo_unsafe(String cooked) {
    renderinfo = cooked;
  }

  public String getRenderinfo()
      throws AccessPoemException {
    readLock();
    return getRenderinfo_unsafe();
  }

  public void setRenderinfo(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getValueInfoTable().getRenderinfoColumn().getType().assertValidCooked(cooked);
    writeLock();
    setRenderinfo_unsafe(cooked);
  }

  public Field getRenderinfoField() throws AccessPoemException {
    Column c = _getValueInfoTable().getRenderinfoColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getRangelow_string_unsafe() {
    return rangelow_string;
  }

  public void setRangelow_string_unsafe(String cooked) {
    rangelow_string = cooked;
  }

  public String getRangelow_string()
      throws AccessPoemException {
    readLock();
    return getRangelow_string_unsafe();
  }

  public void setRangelow_string(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getValueInfoTable().getRangelow_stringColumn().getType().assertValidCooked(cooked);
    writeLock();
    setRangelow_string_unsafe(cooked);
  }

  public Field getRangelow_stringField() throws AccessPoemException {
    Column c = _getValueInfoTable().getRangelow_stringColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getRangelimit_string_unsafe() {
    return rangelimit_string;
  }

  public void setRangelimit_string_unsafe(String cooked) {
    rangelimit_string = cooked;
  }

  public String getRangelimit_string()
      throws AccessPoemException {
    readLock();
    return getRangelimit_string_unsafe();
  }

  public void setRangelimit_string(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getValueInfoTable().getRangelimit_stringColumn().getType().assertValidCooked(cooked);
    writeLock();
    setRangelimit_string_unsafe(cooked);
  }

  public Field getRangelimit_stringField() throws AccessPoemException {
    Column c = _getValueInfoTable().getRangelimit_stringColumn();
    return new Field(c.getRaw(this), c);
  }
}
